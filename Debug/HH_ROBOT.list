
HH_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007088  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b0  080073b0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b8  080073b8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080073c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200000a4  08007468  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08007468  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183b4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315d  00000000  00000000  00038488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c722  00000000  00000000  0003da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d00  00000000  00000000  0005a14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0da2  00000000  00000000  00071e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d4  00000000  00000000  00112c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007210 	.word	0x08007210

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08007210 	.word	0x08007210

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_ZN8APDS9960C1EP17I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "APDS9960.h"

APDS9960::APDS9960(I2C_HandleTypeDef* i2cHandle, UART_HandleTypeDef* uartHandle) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	330e      	adds	r3, #14
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3316      	adds	r3, #22
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
	hi2c = i2cHandle;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
	huart = uartHandle;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
	RGB_Margin = 20;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2214      	movs	r2, #20
 80005e4:	779a      	strb	r2, [r3, #30]
	ATIME = 246;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	22f6      	movs	r2, #246	; 0xf6
 80005ea:	841a      	strh	r2, [r3, #32]
	strcpy(ball_color, "RED"); // default team color to RED
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_ZN8APDS9960C1EP17I2C_HandleTypeDefP20__UART_HandleTypeDef+0x50>)
 80005f0:	6810      	ldr	r0, [r2, #0]
 80005f2:	6018      	str	r0, [r3, #0]

	initialize();
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	f000 f807 	bl	8000608 <_ZN8APDS996010initializeEv>
}
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08007228 	.word	0x08007228

08000608 <_ZN8APDS996010initializeEv>:

uint8_t APDS9960::initialize() {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	uint8_t id = readReg(0x92);
 8000610:	2192      	movs	r1, #146	; 0x92
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f870 	bl	80006f8 <_ZN8APDS99607readRegEh>
 8000618:	4603      	mov	r3, r0
 800061a:	73fb      	strb	r3, [r7, #15]
	if (id != 0xab) {
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2bab      	cmp	r3, #171	; 0xab
 8000620:	d009      	beq.n	8000636 <_ZN8APDS996010initializeEv+0x2e>
		HAL_UART_Transmit(huart, (uint8_t*)"RGB ID NOT FOUND", strlen("RGB ID NOT FOUND"), HAL_MAX_DELAY);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062a:	2210      	movs	r2, #16
 800062c:	4915      	ldr	r1, [pc, #84]	; (8000684 <_ZN8APDS996010initializeEv+0x7c>)
 800062e:	f005 f8a0 	bl	8005772 <HAL_UART_Transmit>
		return 0;
 8000632:	2300      	movs	r3, #0
 8000634:	e022      	b.n	800067c <_ZN8APDS996010initializeEv+0x74>
	} else {
		HAL_UART_Transmit(huart, (uint8_t*)"RGB Sensor initialized\r\n", strlen("RGB Sensor initialized\r\n"), HAL_MAX_DELAY);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800063a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063e:	2218      	movs	r2, #24
 8000640:	4911      	ldr	r1, [pc, #68]	; (8000688 <_ZN8APDS996010initializeEv+0x80>)
 8000642:	f005 f896 	bl	8005772 <HAL_UART_Transmit>
	}
    writeReg(0x80, 0b00001011); // Enables, just using ALS/color feature.
 8000646:	220b      	movs	r2, #11
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f871 	bl	8000732 <_ZN8APDS99608writeRegEhh>
    writeReg(0x83, 250); // Increase Wait time
 8000650:	22fa      	movs	r2, #250	; 0xfa
 8000652:	2183      	movs	r1, #131	; 0x83
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f86c 	bl	8000732 <_ZN8APDS99608writeRegEhh>
    writeReg(0x90, 0b00001000); // Increase LED Strength
 800065a:	2208      	movs	r2, #8
 800065c:	2190      	movs	r1, #144	; 0x90
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f867 	bl	8000732 <_ZN8APDS99608writeRegEhh>
    writeReg(0x81, ATIME); // Set ATIME for photodiode integration time
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	8c1b      	ldrh	r3, [r3, #32]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	2181      	movs	r1, #129	; 0x81
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f85f 	bl	8000732 <_ZN8APDS99608writeRegEhh>


    colorSet();
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f809 	bl	800068c <_ZN8APDS99608colorSetEv>

    return 1;
 800067a:	2301      	movs	r3, #1

}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0800722c 	.word	0x0800722c
 8000688:	08007240 	.word	0x08007240

0800068c <_ZN8APDS99608colorSetEv>:
        return true;
    }
    return false;
}

void APDS9960::colorSet() {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    if (strcmp(ball_color, "RED") == 0) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4916      	ldr	r1, [pc, #88]	; (80006f0 <_ZN8APDS99608colorSetEv+0x64>)
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fda1 	bl	80001e0 <strcmp>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10c      	bne.n	80006be <_ZN8APDS99608colorSetEv+0x32>
        RGBC_Select[0] = 47;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	222f      	movs	r2, #47	; 0x2f
 80006a8:	82da      	strh	r2, [r3, #22]
        RGBC_Select[1] = 9;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2209      	movs	r2, #9
 80006ae:	831a      	strh	r2, [r3, #24]
        RGBC_Select[2] = 10;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	220a      	movs	r2, #10
 80006b4:	835a      	strh	r2, [r3, #26]
        RGBC_Select[3] = 60;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	223c      	movs	r2, #60	; 0x3c
 80006ba:	839a      	strh	r2, [r3, #28]
        RGBC_Select[0] = 125;
        RGBC_Select[1] = 55;
        RGBC_Select[2] = 27;
        RGBC_Select[3] = 180;
    }
}
 80006bc:	e013      	b.n	80006e6 <_ZN8APDS99608colorSetEv+0x5a>
    } else if (strcmp(ball_color, "LIGHTYELLOW") == 0) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <_ZN8APDS99608colorSetEv+0x68>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fd8c 	bl	80001e0 <strcmp>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d10b      	bne.n	80006e6 <_ZN8APDS99608colorSetEv+0x5a>
        RGBC_Select[0] = 125;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	227d      	movs	r2, #125	; 0x7d
 80006d2:	82da      	strh	r2, [r3, #22]
        RGBC_Select[1] = 55;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2237      	movs	r2, #55	; 0x37
 80006d8:	831a      	strh	r2, [r3, #24]
        RGBC_Select[2] = 27;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	221b      	movs	r2, #27
 80006de:	835a      	strh	r2, [r3, #26]
        RGBC_Select[3] = 180;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	22b4      	movs	r2, #180	; 0xb4
 80006e4:	839a      	strh	r2, [r3, #28]
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08007228 	.word	0x08007228
 80006f4:	0800725c 	.word	0x0800725c

080006f8 <_ZN8APDS99607readRegEh>:


uint8_t APDS9960::readReg(uint8_t reg) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af04      	add	r7, sp, #16
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2c, APDS9960_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	b29a      	uxth	r2, r3
 8000710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000714:	9302      	str	r3, [sp, #8]
 8000716:	2301      	movs	r3, #1
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	f107 030f 	add.w	r3, r7, #15
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	2172      	movs	r1, #114	; 0x72
 8000724:	f002 fd8e 	bl	8003244 <HAL_I2C_Mem_Read>
    return value;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <_ZN8APDS99608writeRegEhh>:
    HAL_I2C_Mem_Read(hi2c, APDS9960_I2C_ADDR, reg + 1, I2C_MEMADD_SIZE_8BIT, &value2, 1, 1000);
    uint16_t result = (uint16_t)(value2 << 8 | value1);
    return result;
}

void APDS9960::writeReg(uint8_t reg, uint8_t value) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af04      	add	r7, sp, #16
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	70fb      	strb	r3, [r7, #3]
 800073e:	4613      	mov	r3, r2
 8000740:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(hi2c, APDS9960_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	b29a      	uxth	r2, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	9302      	str	r3, [sp, #8]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	1cbb      	adds	r3, r7, #2
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	2172      	movs	r1, #114	; 0x72
 800075c:	f002 fc78 	bl	8003050 <HAL_I2C_Mem_Write>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_Z12updateStatusP8blue_drv>:
 */

#include "bluetooth_driver.h"
#include "string.h"

void updateStatus(blue_drv_t* blue_drv){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if(*(blue_drv->blue_char_ptr) == '0'){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b30      	cmp	r3, #48	; 0x30
 8000778:	d103      	bne.n	8000782 <_Z12updateStatusP8blue_drv+0x1a>
		blue_drv->status = '0';
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2230      	movs	r2, #48	; 0x30
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e002      	b.n	8000788 <_Z12updateStatusP8blue_drv+0x20>
	} else {
		blue_drv->status = '1';
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2231      	movs	r2, #49	; 0x31
 8000786:	701a      	strb	r2, [r3, #0]
	}
	*(blue_drv->blue_char_ptr) = '0';
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2230      	movs	r2, #48	; 0x30
 800078e:	701a      	strb	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <_Z12init_encodertP12GPIO_TypeDeftS0_P17TIM_HandleTypeDefl>:
 */

#include "encoder_driver.h"
#include "string.h"

encoder_drv_t init_encoder(uint16_t	GPIO_Pin1, GPIO_TypeDef* GPIOx1, uint16_t GPIO_Pin2, GPIO_TypeDef* GPIOx2, TIM_HandleTypeDef* htim, int32_t TPR){
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	461a      	mov	r2, r3
 80007a8:	460b      	mov	r3, r1
 80007aa:	817b      	strh	r3, [r7, #10]
 80007ac:	4613      	mov	r3, r2
 80007ae:	813b      	strh	r3, [r7, #8]
	uint16_t TIME_LAST = __HAL_TIM_GET_COUNTER(htim);
 80007b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	82fb      	strh	r3, [r7, #22]
	encoder_drv_t encoder_drv = {0,0,0, GPIO_Pin1, GPIOx1, GPIO_Pin2,	GPIOx2, htim, TIME_LAST, TPR, 0, 0};
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4618      	mov	r0, r3
 80007bc:	2328      	movs	r3, #40	; 0x28
 80007be:	461a      	mov	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f006 f863 	bl	800688c <memset>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	897a      	ldrh	r2, [r7, #10]
 80007ca:	815a      	strh	r2, [r3, #10]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	893a      	ldrh	r2, [r7, #8]
 80007d6:	821a      	strh	r2, [r3, #16]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6a3a      	ldr	r2, [r7, #32]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e2:	619a      	str	r2, [r3, #24]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	8afa      	ldrh	r2, [r7, #22]
 80007e8:	839a      	strh	r2, [r3, #28]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ee:	621a      	str	r2, [r3, #32]
	encoder_drv.LAST_ENCODER_COUNT = NewState(&encoder_drv);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f000 f878 	bl	80008e6 <_Z8NewStateP11encoder_drv>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	721a      	strb	r2, [r3, #8]
	return encoder_drv;
 80007fe:	bf00      	nop
}
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <_Z14update_encoderP11encoder_drv>:

void update_encoder(encoder_drv_t* encoder_drv){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	uint8_t NEW_COUNT = NewState(encoder_drv);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 f868 	bl	80008e6 <_Z8NewStateP11encoder_drv>
 8000816:	4603      	mov	r3, r0
 8000818:	73fb      	strb	r3, [r7, #15]
	if (NEW_COUNT - encoder_drv->LAST_ENCODER_COUNT == 1){
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	7a12      	ldrb	r2, [r2, #8]
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	2b01      	cmp	r3, #1
 8000824:	d105      	bne.n	8000832 <_Z14update_encoderP11encoder_drv+0x2a>
		encoder_drv->TOTAL_COUNT++;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	e01f      	b.n	8000872 <_Z14update_encoderP11encoder_drv+0x6a>
	} else if ((encoder_drv->LAST_ENCODER_COUNT - NEW_COUNT == 1) || (NEW_COUNT == 3 && encoder_drv->LAST_ENCODER_COUNT == 0)){
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a1b      	ldrb	r3, [r3, #8]
 8000836:	461a      	mov	r2, r3
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2b01      	cmp	r3, #1
 800083e:	d006      	beq.n	800084e <_Z14update_encoderP11encoder_drv+0x46>
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b03      	cmp	r3, #3
 8000844:	d109      	bne.n	800085a <_Z14update_encoderP11encoder_drv+0x52>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a1b      	ldrb	r3, [r3, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d105      	bne.n	800085a <_Z14update_encoderP11encoder_drv+0x52>
		encoder_drv->TOTAL_COUNT--;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1e5a      	subs	r2, r3, #1
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	e00b      	b.n	8000872 <_Z14update_encoderP11encoder_drv+0x6a>
	} else if (NEW_COUNT == 0 && encoder_drv->LAST_ENCODER_COUNT == 3){
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d108      	bne.n	8000872 <_Z14update_encoderP11encoder_drv+0x6a>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7a1b      	ldrb	r3, [r3, #8]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d104      	bne.n	8000872 <_Z14update_encoderP11encoder_drv+0x6a>
		encoder_drv->TOTAL_COUNT++;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
	} else {
		//zero(encoder_drv);
	}
	encoder_drv->LAST_ENCODER_COUNT = NEW_COUNT;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7bfa      	ldrb	r2, [r7, #15]
 8000876:	721a      	strb	r2, [r3, #8]
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_Z20Update_Encoder_StateP11encoder_drv>:

void Update_Encoder_State(encoder_drv_t* encoder_drv){
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	uint16_t time = __HAL_TIM_GET_COUNTER(encoder_drv->htim);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000890:	81fb      	strh	r3, [r7, #14]
	encoder_drv->vel = (encoder_drv->TOTAL_COUNT - encoder_drv->LAST_COUNT)/encoder_drv->TPR/(time - encoder_drv->LAST_TIME);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	1ad2      	subs	r2, r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80008a4:	89fb      	ldrh	r3, [r7, #14]
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	8b89      	ldrh	r1, [r1, #28]
 80008aa:	1a5b      	subs	r3, r3, r1
 80008ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	encoder_drv->LAST_TIME = time;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	89fa      	ldrh	r2, [r7, #14]
 80008bc:	839a      	strh	r2, [r3, #28]
	encoder_drv->LAST_COUNT = encoder_drv->TOTAL_COUNT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	605a      	str	r2, [r3, #4]
	encoder_drv->pos = encoder_drv->TOTAL_COUNT/encoder_drv->TPR;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a1b      	ldr	r3, [r3, #32]
 80008ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80008d2:	b25a      	sxtb	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_Z8NewStateP11encoder_drv>:
}

// private functions


uint8_t NewState(encoder_drv_t* encoder_drv){
 80008e6:	b590      	push	{r4, r7, lr}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	uint8_t gray = (HAL_GPIO_ReadPin (encoder_drv->GPIOx1, encoder_drv->GPIO_Pin1) << 1) | HAL_GPIO_ReadPin (encoder_drv->GPIOx2, encoder_drv->GPIO_Pin2);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	895b      	ldrh	r3, [r3, #10]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4610      	mov	r0, r2
 80008fa:	f002 fa35 	bl	8002d68 <HAL_GPIO_ReadPin>
 80008fe:	4603      	mov	r3, r0
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	b25c      	sxtb	r4, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	8a1b      	ldrh	r3, [r3, #16]
 800090c:	4619      	mov	r1, r3
 800090e:	4610      	mov	r0, r2
 8000910:	f002 fa2a 	bl	8002d68 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	b25b      	sxtb	r3, r3
 8000918:	4323      	orrs	r3, r4
 800091a:	b25b      	sxtb	r3, r3
 800091c:	73fb      	strb	r3, [r7, #15]
    uint8_t binary = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73bb      	strb	r3, [r7, #14]
	while (gray != 0) {
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d007      	beq.n	8000938 <_Z8NewStateP11encoder_drv+0x52>
        binary ^= gray;
 8000928:	7bba      	ldrb	r2, [r7, #14]
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	4053      	eors	r3, r2
 800092e:	73bb      	strb	r3, [r7, #14]
        gray >>= 1;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	085b      	lsrs	r3, r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
	while (gray != 0) {
 8000936:	e7f4      	b.n	8000922 <_Z8NewStateP11encoder_drv+0x3c>
    }
	return binary;
 8000938:	7bbb      	ldrb	r3, [r7, #14]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}

08000942 <_Z11update_LineP8line_drv>:
 */

#include "line_driver.h"
#include "string.h"

void update_Line(line_drv_t* line_drv){
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin (line_drv->GPIOx, line_drv->GPIO_Pin)){
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	891b      	ldrh	r3, [r3, #8]
 8000952:	4619      	mov	r1, r3
 8000954:	4610      	mov	r0, r2
 8000956:	f002 fa07 	bl	8002d68 <HAL_GPIO_ReadPin>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf0c      	ite	eq
 8000960:	2301      	moveq	r3, #1
 8000962:	2300      	movne	r3, #0
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <_Z11update_LineP8line_drv+0x30>
		line_drv->state = '0';
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2230      	movs	r2, #48	; 0x30
 800096e:	701a      	strb	r2, [r3, #0]
	} else if(GPIO_PIN_SET == HAL_GPIO_ReadPin (line_drv->GPIOx, line_drv->GPIO_Pin)){
		line_drv->state = '1';
	}
}
 8000970:	e012      	b.n	8000998 <_Z11update_LineP8line_drv+0x56>
	} else if(GPIO_PIN_SET == HAL_GPIO_ReadPin (line_drv->GPIOx, line_drv->GPIO_Pin)){
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	891b      	ldrh	r3, [r3, #8]
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f002 f9f3 	bl	8002d68 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <_Z11update_LineP8line_drv+0x56>
		line_drv->state = '1';
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2231      	movs	r2, #49	; 0x31
 8000996:	701a      	strb	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_Z11print_LineFP8line_drvP20__UART_HandleTypeDef>:

void print_LineF(line_drv_t* line_drv, UART_HandleTypeDef* huart){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b090      	sub	sp, #64	; 0x40
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	char recieved[25] = "\nLine:";
 80009aa:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <_Z11print_LineFP8line_drvP20__UART_HandleTypeDef+0xa0>)
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b4:	6018      	str	r0, [r3, #0]
 80009b6:	3304      	adds	r3, #4
 80009b8:	8019      	strh	r1, [r3, #0]
 80009ba:	3302      	adds	r3, #2
 80009bc:	0c0a      	lsrs	r2, r1, #16
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	821a      	strh	r2, [r3, #16]
	HAL_UART_Transmit(huart,(uint8_t*) &recieved, strlen(recieved),1000);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fc0d 	bl	80001f4 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	6838      	ldr	r0, [r7, #0]
 80009e8:	f004 fec3 	bl	8005772 <HAL_UART_Transmit>
	char state = (char)(line_drv->state);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	HAL_UART_Transmit(huart,(uint8_t*) &state, 1,1000);
 80009f4:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80009f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fc:	2201      	movs	r2, #1
 80009fe:	6838      	ldr	r0, [r7, #0]
 8000a00:	f004 feb7 	bl	8005772 <HAL_UART_Transmit>
	char line[25] = "\n\n\r";
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <_Z11print_LineFP8line_drvP20__UART_HandleTypeDef+0xa4>)
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	751a      	strb	r2, [r3, #20]
	HAL_UART_Transmit(huart,(uint8_t*) &line, strlen(line),1000);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fbe8 	bl	80001f4 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f107 0108 	add.w	r1, r7, #8
 8000a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a30:	6838      	ldr	r0, [r7, #0]
 8000a32:	f004 fe9e 	bl	8005772 <HAL_UART_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	3740      	adds	r7, #64	; 0x40
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08007288 	.word	0x08007288
 8000a44:	000d0a0a 	.word	0x000d0a0a

08000a48 <_Z10MOTOR_TASKP9motor_drvS0_P20__UART_HandleTypeDef>:

}



void MOTOR_TASK(motor_drv_t* motor1, motor_drv_t* motor2, UART_HandleTypeDef* huart) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	  setPWM(motor1);
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 fe57 	bl	8001708 <_Z6setPWMP9motor_drv>
	  setPWM(motor2);
 8000a5a:	68b8      	ldr	r0, [r7, #8]
 8000a5c:	f000 fe54 	bl	8001708 <_Z6setPWMP9motor_drv>
	  //comPutty(huart);
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0a0      	sub	sp, #128	; 0x80
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f001 fb6f 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f877 	bl	8000b64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f000 fc6b 	bl	8001350 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000a7a:	f000 f8e5 	bl	8000c48 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000a7e:	f000 f93f 	bl	8000d00 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000a82:	f000 f971 	bl	8000d68 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000a86:	f000 fa17 	bl	8000eb8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000a8a:	f000 fa8d 	bl	8000fa8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000a8e:	f000 fb03 	bl	8001098 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8000a92:	f000 fc01 	bl	8001298 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8000a96:	f000 fc2d 	bl	80012f4 <_ZL19MX_USART6_UART_Initv>
  MX_TIM5_Init();
 8000a9a:	f000 fb77 	bl	800118c <_ZL12MX_TIM5_Initv>
  MX_TIM10_Init();
 8000a9e:	f000 fbd1 	bl	8001244 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */


  /*################# INITIALIZATION ####################################-*/
  usrprint("Initializing...");
 8000aa2:	4822      	ldr	r0, [pc, #136]	; (8000b2c <main+0xc4>)
 8000aa4:	f000 fcc6 	bl	8001434 <_Z8usrprintPKc>
  // -----------------  SORT TASK  ---------------------------------
  // Color Sensor Initialization
  APDS9960 RGB_SORT(&hi2c1, &huart1);
 8000aa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aac:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <main+0xc8>)
 8000aae:	4921      	ldr	r1, [pc, #132]	; (8000b34 <main+0xcc>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fd7f 	bl	80005b4 <_ZN8APDS9960C1EP17I2C_HandleTypeDefP20__UART_HandleTypeDef>
  sort_flg = RGB_SORT.initialize();
 8000ab6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fda4 	bl	8000608 <_ZN8APDS996010initializeEv>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <main+0xd0>)
 8000ac6:	701a      	strb	r2, [r3, #0]
  RGB_SORT.ATIME = 250; //change sensor read time to adjust for lighting conditions
 8000ac8:	23fa      	movs	r3, #250	; 0xfa
 8000aca:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  // Create a Servo object
  Servo SERVO_SORT(&htim4, TIM_CHANNEL_3, &htim5);
 8000ace:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <main+0xd4>)
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	491a      	ldr	r1, [pc, #104]	; (8000b40 <main+0xd8>)
 8000ad8:	f000 feda 	bl	8001890 <_ZN5ServoC1EP17TIM_HandleTypeDefmS1_>


  // -----------------  DRIVE TASK  --------------------------------------
  // -----------------  NAVIGATION TASK  ---------------------------------
  // -----------------  DEADMAN TASK     ---------------------------------
  HAL_UART_Receive_IT(&huart6,(uint8_t*) &blue_char, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	4919      	ldr	r1, [pc, #100]	; (8000b44 <main+0xdc>)
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <main+0xe0>)
 8000ae2:	f004 fed8 	bl	8005896 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000ae6:	4819      	ldr	r0, [pc, #100]	; (8000b4c <main+0xe4>)
 8000ae8:	f003 fdd6 	bl	8004698 <HAL_TIM_Base_Start_IT>

  usrprint("hiiii");
 8000aec:	4818      	ldr	r0, [pc, #96]	; (8000b50 <main+0xe8>)
 8000aee:	f000 fca1 	bl	8001434 <_Z8usrprintPKc>
  // -----------------  CORRAL TASK     ---------------------------------
  Servo SERVO_CORRAL(&htim4, TIM_CHANNEL_4, &htim5);
 8000af2:	1d38      	adds	r0, r7, #4
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <main+0xd4>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	4911      	ldr	r1, [pc, #68]	; (8000b40 <main+0xd8>)
 8000afa:	f000 fec9 	bl	8001890 <_ZN5ServoC1EP17TIM_HandleTypeDefmS1_>
  SERVO_CORRAL.max_rot = 270;
 8000afe:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000b02:	81bb      	strh	r3, [r7, #12]
  SERVO_CORRAL.setAngle(90); //start in upright position TODO: move to mastermind at some point
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	215a      	movs	r1, #90	; 0x5a
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fee7 	bl	80018dc <_ZN5Servo8setAngleEm>
  // -----------------  MASTERMIND TASK  ---------------------------------
  HAL_UART_Receive_IT(&huart1,(uint8_t*) &char_in, 1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4910      	ldr	r1, [pc, #64]	; (8000b54 <main+0xec>)
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <main+0xc8>)
 8000b14:	f004 febf 	bl	8005896 <HAL_UART_Receive_IT>
  usrprint("hiiiasdfai");
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <main+0xf0>)
 8000b1a:	f000 fc8b 	bl	8001434 <_Z8usrprintPKc>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//SORT_TASK(RGB_SORT, SERVO_SORT);
	MOTOR_TASK(&motor1, &motor2, &huart1);
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <main+0xc8>)
 8000b20:	490e      	ldr	r1, [pc, #56]	; (8000b5c <main+0xf4>)
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <main+0xf8>)
 8000b24:	f7ff ff90 	bl	8000a48 <_Z10MOTOR_TASKP9motor_drvS0_P20__UART_HandleTypeDef>
 8000b28:	e7f9      	b.n	8000b1e <main+0xb6>
 8000b2a:	bf00      	nop
 8000b2c:	08007318 	.word	0x08007318
 8000b30:	2000030c 	.word	0x2000030c
 8000b34:	20000108 	.word	0x20000108
 8000b38:	20000394 	.word	0x20000394
 8000b3c:	2000027c 	.word	0x2000027c
 8000b40:	20000234 	.word	0x20000234
 8000b44:	20000396 	.word	0x20000396
 8000b48:	20000350 	.word	0x20000350
 8000b4c:	200002c4 	.word	0x200002c4
 8000b50:	08007328 	.word	0x08007328
 8000b54:	20000395 	.word	0x20000395
 8000b58:	08007330 	.word	0x08007330
 8000b5c:	20000024 	.word	0x20000024
 8000b60:	20000014 	.word	0x20000014

08000b64 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2230      	movs	r2, #48	; 0x30
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 fe8a 	bl	800688c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <_Z18SystemClock_Configv+0xdc>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <_Z18SystemClock_Configv+0xdc>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <_Z18SystemClock_Configv+0xdc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <_Z18SystemClock_Configv+0xe0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <_Z18SystemClock_Configv+0xe0>)
 8000bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <_Z18SystemClock_Configv+0xe0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bd8:	2360      	movs	r3, #96	; 0x60
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be0:	2304      	movs	r3, #4
 8000be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 f8ad 	bl	8003d48 <HAL_RCC_OscConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf14      	ite	ne
 8000bf4:	2301      	movne	r3, #1
 8000bf6:	2300      	moveq	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000bfe:	f000 fd0d 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2302      	movs	r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fb0a 	bl	8004238 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000c34:	f000 fcf2 	bl	800161c <Error_Handler>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3750      	adds	r7, #80	; 0x50
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40007000 	.word	0x40007000

08000c48 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c5c:	4a26      	ldr	r2, [pc, #152]	; (8000cf8 <_ZL12MX_ADC1_Initv+0xb0>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <_ZL12MX_ADC1_Initv+0xb4>)
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000caa:	f001 fac3 	bl	8002234 <HAL_ADC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf14      	ite	ne
 8000cb4:	2301      	movne	r3, #1
 8000cb6:	2300      	moveq	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000cbe:	f000 fcad 	bl	800161c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <_ZL12MX_ADC1_Initv+0xac>)
 8000cd4:	f001 faf2 	bl	80022bc <HAL_ADC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000ce8:	f000 fc98 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000c0 	.word	0x200000c0
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	0f000001 	.word	0x0f000001

08000d00 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <_ZL12MX_I2C1_Initv+0x60>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <_ZL12MX_I2C1_Initv+0x64>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <_ZL12MX_I2C1_Initv+0x5c>)
 8000d3e:	f002 f843 	bl	8002dc8 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000d52:	f000 fc63 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000108 	.word	0x20000108
 8000d60:	40005400 	.word	0x40005400
 8000d64:	000186a0 	.word	0x000186a0

08000d68 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b092      	sub	sp, #72	; 0x48
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2220      	movs	r2, #32
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 fd7a 	bl	800688c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d98:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <_ZL12MX_TIM1_Initv+0x14c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d9e:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4800-1;
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000dac:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dc4:	483a      	ldr	r0, [pc, #232]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000dc6:	f003 fcc9 	bl	800475c <HAL_TIM_PWM_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf14      	ite	ne
 8000dd0:	2301      	movne	r3, #1
 8000dd2:	2300      	moveq	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8000dda:	f000 fc1f 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dea:	4619      	mov	r1, r3
 8000dec:	4830      	ldr	r0, [pc, #192]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000dee:	f004 fb9f 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf14      	ite	ne
 8000df8:	2301      	movne	r3, #1
 8000dfa:	2300      	moveq	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000e02:	f000 fc0b 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e06:	2360      	movs	r3, #96	; 0x60
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000e2c:	f003 ff02 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf14      	ite	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	2300      	moveq	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8000e40:	f000 fbec 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	2204      	movs	r2, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000e4e:	f003 fef1 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf14      	ite	ne
 8000e58:	2301      	movne	r3, #1
 8000e5a:	2300      	moveq	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8000e62:	f000 fbdb 	bl	800161c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000e8a:	f004 fbbf 	bl	800560c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf14      	ite	ne
 8000e94:	2301      	movne	r3, #1
 8000e96:	2300      	moveq	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <_ZL12MX_TIM1_Initv+0x13a>
  {
    Error_Handler();
 8000e9e:	f000 fbbd 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <_ZL12MX_TIM1_Initv+0x148>)
 8000ea4:	f000 feec 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8000ea8:	bf00      	nop
 8000eaa:	3748      	adds	r7, #72	; 0x48
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000015c 	.word	0x2000015c
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ee2:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000ef0:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000ef4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f02:	4828      	ldr	r0, [pc, #160]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000f04:	f003 fc2a 	bl	800475c <HAL_TIM_PWM_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8000f18:	f000 fb80 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000f2c:	f004 fb00 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8000f40:	f000 fb6c 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000f5c:	f003 fe6a 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8000f70:	f000 fb54 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2204      	movs	r2, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000f7c:	f003 fe5a 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000f90:	f000 fb44 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <_ZL12MX_TIM2_Initv+0xec>)
 8000f96:	f000 fe73 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001a4 	.word	0x200001a4

08000fa8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8000fcc:	4a31      	ldr	r2, [pc, #196]	; (8001094 <_ZL12MX_TIM3_Initv+0xec>)
 8000fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4800-1;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8000fde:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000fe2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff0:	4827      	ldr	r0, [pc, #156]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8000ff2:	f003 fbb3 	bl	800475c <HAL_TIM_PWM_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf14      	ite	ne
 8000ffc:	2301      	movne	r3, #1
 8000ffe:	2300      	moveq	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001006:	f000 fb09 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4619      	mov	r1, r3
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 800101a:	f004 fa89 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800102e:	f000 faf5 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001032:	2360      	movs	r3, #96	; 0x60
 8001034:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 800104a:	f003 fdf3 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800105e:	f000 fadd 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2204      	movs	r2, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 800106a:	f003 fde3 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf14      	ite	ne
 8001074:	2301      	movne	r3, #1
 8001076:	2300      	moveq	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800107e:	f000 facd 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <_ZL12MX_TIM3_Initv+0xe8>)
 8001084:	f000 fdfc 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200001ec 	.word	0x200001ec
 8001094:	40000400 	.word	0x40000400

08001098 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ba:	4b32      	ldr	r3, [pc, #200]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 80010bc:	4a32      	ldr	r2, [pc, #200]	; (8001188 <_ZL12MX_TIM4_Initv+0xf0>)
 80010be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1920-1;
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 80010c2:	f240 727f 	movw	r2, #1919	; 0x77f
 80010c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 80010d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010e2:	4828      	ldr	r0, [pc, #160]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 80010e4:	f003 fb3a 	bl	800475c <HAL_TIM_PWM_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <_ZL12MX_TIM4_Initv+0x64>
  {
    Error_Handler();
 80010f8:	f000 fa90 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4619      	mov	r1, r3
 800110a:	481e      	ldr	r0, [pc, #120]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 800110c:	f004 fa10 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <_ZL12MX_TIM4_Initv+0x8c>
  {
    Error_Handler();
 8001120:	f000 fa7c 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001124:	2360      	movs	r3, #96	; 0x60
 8001126:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2208      	movs	r2, #8
 8001138:	4619      	mov	r1, r3
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 800113c:	f003 fd7a 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <_ZL12MX_TIM4_Initv+0xbc>
  {
    Error_Handler();
 8001150:	f000 fa64 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	220c      	movs	r2, #12
 8001158:	4619      	mov	r1, r3
 800115a:	480a      	ldr	r0, [pc, #40]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 800115c:	f003 fd6a 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <_ZL12MX_TIM4_Initv+0xdc>
  {
    Error_Handler();
 8001170:	f000 fa54 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <_ZL12MX_TIM4_Initv+0xec>)
 8001176:	f000 fd83 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000234 	.word	0x20000234
 8001188:	40000800 	.word	0x40000800

0800118c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011aa:	4a25      	ldr	r2, [pc, #148]	; (8001240 <_ZL12MX_TIM5_Initv+0xb4>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011b0:	225f      	movs	r2, #95	; 0x5f
 80011b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011ce:	481b      	ldr	r0, [pc, #108]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011d0:	f003 fa12 	bl	80045f8 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf14      	ite	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	2300      	moveq	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 80011e4:	f000 fa1a 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 80011f6:	f003 fddf 	bl	8004db8 <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 800120a:	f000 fa07 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <_ZL12MX_TIM5_Initv+0xb0>)
 800121c:	f004 f988 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 8001230:	f000 f9f4 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000027c 	.word	0x2000027c
 8001240:	40000c00 	.word	0x40000c00

08001244 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_ZL13MX_TIM10_Initv+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_ZL13MX_TIM10_Initv+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2000-1;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_ZL13MX_TIM10_Initv+0x4c>)
 8001250:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001254:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <_ZL13MX_TIM10_Initv+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 48000-1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <_ZL13MX_TIM10_Initv+0x4c>)
 800125e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001262:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <_ZL13MX_TIM10_Initv+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <_ZL13MX_TIM10_Initv+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <_ZL13MX_TIM10_Initv+0x4c>)
 8001272:	f003 f9c1 	bl	80045f8 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <_ZL13MX_TIM10_Initv+0x46>
  {
    Error_Handler();
 8001286:	f000 f9c9 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002c4 	.word	0x200002c4
 8001294:	40014400 	.word	0x40014400

08001298 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_ZL19MX_USART1_UART_Initv+0x58>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x54>)
 80012d0:	f004 fa02 	bl	80056d8 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80012e4:	f000 f99a 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000030c 	.word	0x2000030c
 80012f0:	40011000 	.word	0x40011000

080012f4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <_ZL19MX_USART6_UART_Initv+0x58>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001300:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001304:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <_ZL19MX_USART6_UART_Initv+0x54>)
 800132c:	f004 f9d4 	bl	80056d8 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001340:	f000 f96c 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000350 	.word	0x20000350
 800134c:	40011400 	.word	0x40011400

08001350 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a27      	ldr	r2, [pc, #156]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a20      	ldr	r2, [pc, #128]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <_ZL12MX_GPIO_Initv+0xd8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : M1_OUTA_Pin M1_OUTB_Pin */
  GPIO_InitStruct.Pin = M1_OUTA_Pin|M1_OUTB_Pin;
 80013ba:	230c      	movs	r3, #12
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013be:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <_ZL12MX_GPIO_Initv+0xdc>)
 80013d0:	f001 fb46 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_LINE_OUT_Pin RIGHT_LINE_OUT_Pin M2_OUTB_Pin M2_OUTA_Pin */
  GPIO_InitStruct.Pin = LEFT_LINE_OUT_Pin|RIGHT_LINE_OUT_Pin|M2_OUTB_Pin|M2_OUTA_Pin;
 80013d4:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80013d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013da:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <_ZL12MX_GPIO_Initv+0xe0>)
 80013ec:	f001 fb38 	bl	8002a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2008      	movs	r0, #8
 80013f6:	f001 fa6a 	bl	80028ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013fa:	2008      	movs	r0, #8
 80013fc:	f001 fa83 	bl	8002906 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2009      	movs	r0, #9
 8001406:	f001 fa62 	bl	80028ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800140a:	2009      	movs	r0, #9
 800140c:	f001 fa7b 	bl	8002906 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2028      	movs	r0, #40	; 0x28
 8001416:	f001 fa5a 	bl	80028ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800141a:	2028      	movs	r0, #40	; 0x28
 800141c:	f001 fa73 	bl	8002906 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400

08001434 <_Z8usrprintPKc>:

/* USER CODE BEGIN 4 */
void usrprint(const char* message)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    // Create a buffer for the complete message with \r\n
    char* completeMessage = new char[strlen(message) + 3];
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7fe fed9 	bl	80001f4 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	3303      	adds	r3, #3
 8001446:	4618      	mov	r0, r3
 8001448:	f005 f9c0 	bl	80067cc <_Znaj>
 800144c:	4603      	mov	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
    strcpy(completeMessage, message);
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f005 fb76 	bl	8006b44 <strcpy>
    strcat(completeMessage, "\r\n");
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7fe fecb 	bl	80001f4 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	4a0d      	ldr	r2, [pc, #52]	; (800149c <_Z8usrprintPKc+0x68>)
 8001468:	8811      	ldrh	r1, [r2, #0]
 800146a:	7892      	ldrb	r2, [r2, #2]
 800146c:	8019      	strh	r1, [r3, #0]
 800146e:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart1, reinterpret_cast<uint8_t*>(const_cast<char*>(completeMessage)), strlen(completeMessage), HAL_MAX_DELAY);
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7fe febf 	bl	80001f4 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147e:	68f9      	ldr	r1, [r7, #12]
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <_Z8usrprintPKc+0x6c>)
 8001482:	f004 f976 	bl	8005772 <HAL_UART_Transmit>


    delete[] completeMessage; // Release the dynamically allocated memory
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <_Z8usrprintPKc+0x5e>
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f005 f99b 	bl	80067c8 <_ZdaPv>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800733c 	.word	0x0800733c
 80014a0:	2000030c 	.word	0x2000030c

080014a4 <HAL_UART_RxCpltCallback>:
    // Print the value
    usrprint(stringValue);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	// Check which version of the UART triggered this callback
	if(huart == &huart1){
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_UART_RxCpltCallback+0x3c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d107      	bne.n	80014c4 <HAL_UART_RxCpltCallback+0x20>
		usrprint(&char_in);
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <HAL_UART_RxCpltCallback+0x40>)
 80014b6:	f7ff ffbd 	bl	8001434 <_Z8usrprintPKc>
		HAL_UART_Receive_IT(huart,(uint8_t*) &char_in, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	4909      	ldr	r1, [pc, #36]	; (80014e4 <HAL_UART_RxCpltCallback+0x40>)
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f004 f9e9 	bl	8005896 <HAL_UART_Receive_IT>
	}
	if(huart == &huart6){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_UART_RxCpltCallback+0x44>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d104      	bne.n	80014d6 <HAL_UART_RxCpltCallback+0x32>
		HAL_UART_Receive_IT(huart,(uint8_t*) &blue_char, 1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	4907      	ldr	r1, [pc, #28]	; (80014ec <HAL_UART_RxCpltCallback+0x48>)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f004 f9e0 	bl	8005896 <HAL_UART_Receive_IT>
	}
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000030c 	.word	0x2000030c
 80014e4:	20000395 	.word	0x20000395
 80014e8:	20000350 	.word	0x20000350
 80014ec:	20000396 	.word	0x20000396

080014f0 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim10 ){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a19      	ldr	r2, [pc, #100]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d125      	bne.n	800154c <HAL_TIM_PeriodElapsedCallback+0x5c>
	  updateStatus(&blue1);
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001502:	f7ff f931 	bl	8000768 <_Z12updateStatusP8blue_drv>
	  // May need to move if stantement as function into master mind task
	  if(blue1.status == '0' && blue1.cur_state == '1'){
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b30      	cmp	r3, #48	; 0x30
 800150c:	d10d      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x3a>
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	2b31      	cmp	r3, #49	; 0x31
 8001514:	d109      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x3a>
		  disable(&motor1);
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001518:	f000 f8de 	bl	80016d8 <_Z7disableP9motor_drv>
		  disable(&motor2);
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800151e:	f000 f8db 	bl	80016d8 <_Z7disableP9motor_drv>
		  blue1.cur_state = '0';
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001524:	2230      	movs	r2, #48	; 0x30
 8001526:	705a      	strb	r2, [r3, #1]
 8001528:	e010      	b.n	800154c <HAL_TIM_PeriodElapsedCallback+0x5c>
	  } else if(blue1.status == '1' && blue1.cur_state == '0'){
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b31      	cmp	r3, #49	; 0x31
 8001530:	d10c      	bne.n	800154c <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	2b30      	cmp	r3, #48	; 0x30
 8001538:	d108      	bne.n	800154c <HAL_TIM_PeriodElapsedCallback+0x5c>
		  enable(&motor1);
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800153c:	f000 f8b4 	bl	80016a8 <_Z6enableP9motor_drv>
		  enable(&motor2);
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001542:	f000 f8b1 	bl	80016a8 <_Z6enableP9motor_drv>
		  blue1.cur_state = '1';
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001548:	2231      	movs	r2, #49	; 0x31
 800154a:	705a      	strb	r2, [r3, #1]
	  }
  }
  Update_Encoder_State(&encoder1);
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800154e:	f7ff f997 	bl	8000880 <_Z20Update_Encoder_StateP11encoder_drv>
  Update_Encoder_State(&encoder2);
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001554:	f7ff f994 	bl	8000880 <_Z20Update_Encoder_StateP11encoder_drv>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200002c4 	.word	0x200002c4
 8001564:	20000000 	.word	0x20000000
 8001568:	20000014 	.word	0x20000014
 800156c:	20000024 	.word	0x20000024
 8001570:	20000398 	.word	0x20000398
 8001574:	200003c0 	.word	0x200003c0

08001578 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001578:	b580      	push	{r7, lr}
 800157a:	b090      	sub	sp, #64	; 0x40
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
	/*if (GPIO_Pin == RIGHT_LINE_OUT_Pin){
		update_Line(&lineR);
		print_LineF(&lineR, &huart1);
	}*/
	if (GPIO_Pin == LEFT_LINE_OUT_Pin){
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001588:	d107      	bne.n	800159a <HAL_GPIO_EXTI_Callback+0x22>
		update_Line(&lineL);
 800158a:	481e      	ldr	r0, [pc, #120]	; (8001604 <HAL_GPIO_EXTI_Callback+0x8c>)
 800158c:	f7ff f9d9 	bl	8000942 <_Z11update_LineP8line_drv>
		print_LineF(&lineL, &huart1);
 8001590:	491d      	ldr	r1, [pc, #116]	; (8001608 <HAL_GPIO_EXTI_Callback+0x90>)
 8001592:	481c      	ldr	r0, [pc, #112]	; (8001604 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001594:	f7ff fa04 	bl	80009a0 <_Z11print_LineFP8line_drvP20__UART_HandleTypeDef>
		update_encoder(&encoder2);
		char str[25];
		sprintf(str, "Encoder2: %lu", encoder2.TOTAL_COUNT);
		usrprint(str);
	}
}
 8001598:	e02f      	b.n	80015fa <HAL_GPIO_EXTI_Callback+0x82>
	else if (GPIO_Pin == M1_OUTA_Pin || GPIO_Pin == M1_OUTB_Pin){
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d002      	beq.n	80015a6 <HAL_GPIO_EXTI_Callback+0x2e>
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d111      	bne.n	80015ca <HAL_GPIO_EXTI_Callback+0x52>
		update_encoder(&encoder1);
 80015a6:	4819      	ldr	r0, [pc, #100]	; (800160c <HAL_GPIO_EXTI_Callback+0x94>)
 80015a8:	f7ff f92e 	bl	8000808 <_Z14update_encoderP11encoder_drv>
		sprintf(str, "Encoder1: %lu", encoder1.TOTAL_COUNT);
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_GPIO_EXTI_Callback+0x94>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_GPIO_EXTI_Callback+0x98>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 faa4 	bl	8006b04 <siprintf>
		usrprint(str);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff37 	bl	8001434 <_Z8usrprintPKc>
 80015c6:	bf00      	nop
}
 80015c8:	e017      	b.n	80015fa <HAL_GPIO_EXTI_Callback+0x82>
	else if (GPIO_Pin == M2_OUTA_Pin || GPIO_Pin == M2_OUTB_Pin){
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_EXTI_Callback+0x62>
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015d8:	d10f      	bne.n	80015fa <HAL_GPIO_EXTI_Callback+0x82>
		update_encoder(&encoder2);
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015dc:	f7ff f914 	bl	8000808 <_Z14update_encoderP11encoder_drv>
		sprintf(str, "Encoder2: %lu", encoder2.TOTAL_COUNT);
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_GPIO_EXTI_Callback+0x9c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	490b      	ldr	r1, [pc, #44]	; (8001618 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fa8a 	bl	8006b04 <siprintf>
		usrprint(str);
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff1d 	bl	8001434 <_Z8usrprintPKc>
}
 80015fa:	bf00      	nop
 80015fc:	3740      	adds	r7, #64	; 0x40
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000008 	.word	0x20000008
 8001608:	2000030c 	.word	0x2000030c
 800160c:	20000398 	.word	0x20000398
 8001610:	08007344 	.word	0x08007344
 8001614:	200003c0 	.word	0x200003c0
 8001618:	08007354 	.word	0x08007354

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af04      	add	r7, sp, #16
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d120      	bne.n	800167a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	4293      	cmp	r3, r2
 8001640:	d11b      	bne.n	800167a <_Z41__static_initialization_and_destruction_0ii+0x52>
encoder_drv_t encoder1 = init_encoder(M1_OUTA_Pin, GPIOA, M1_OUTB_Pin, GPIOA, &htim10, 16*50);
 8001642:	4810      	ldr	r0, [pc, #64]	; (8001684 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001644:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2308      	movs	r3, #8
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001656:	2104      	movs	r1, #4
 8001658:	f7ff f8a0 	bl	800079c <_Z12init_encodertP12GPIO_TypeDeftS0_P17TIM_HandleTypeDefl>
encoder_drv_t encoder2 = init_encoder(M2_OUTA_Pin, GPIOB, M2_OUTB_Pin, GPIOB, &htim10, 16*50);
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800165e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001670:	4a08      	ldr	r2, [pc, #32]	; (8001694 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001676:	f7ff f891 	bl	800079c <_Z12init_encodertP12GPIO_TypeDeftS0_P17TIM_HandleTypeDefl>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000398 	.word	0x20000398
 8001688:	200002c4 	.word	0x200002c4
 800168c:	40020000 	.word	0x40020000
 8001690:	200003c0 	.word	0x200003c0
 8001694:	40020400 	.word	0x40020400

08001698 <_GLOBAL__sub_I_hadc1>:
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
 800169c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff ffc1 	bl	8001628 <_Z41__static_initialization_and_destruction_0ii>
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_Z6enableP9motor_drv>:
 *      Author: johna
 */

#include "motor_driver.h"

void enable(motor_drv_t* motor_drv){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(motor_drv->htim,motor_drv->chan_1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f003 f89e 	bl	80047fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor_drv->htim,motor_drv->chan_2);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4610      	mov	r0, r2
 80016cc:	f003 f896 	bl	80047fc <HAL_TIM_PWM_Start>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_Z7disableP9motor_drv>:

void disable(motor_drv_t* motor_drv){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(motor_drv->htim,motor_drv->chan_1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4610      	mov	r0, r2
 80016ec:	f003 f936 	bl	800495c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(motor_drv->htim,motor_drv->chan_2);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f003 f92e 	bl	800495c <HAL_TIM_PWM_Stop>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_Z6setPWMP9motor_drv>:

void scaleNewPulse(motor_drv_t* motor_drv, int8_t val_8){
	motor_drv->pulse = ((int32_t)val_8)*(2*(int32_t)motor_drv->htim->Init.Period + 1)/256;
}

void setPWM(motor_drv_t* motor_drv){
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	uint32_t ch1_pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
	uint32_t ch2_pulse = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
	if(motor_drv->pulse > (int32_t) motor_drv->htim->Init.Period){
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68d2      	ldr	r2, [r2, #12]
 8001720:	68d2      	ldr	r2, [r2, #12]
 8001722:	4293      	cmp	r3, r2
 8001724:	dd06      	ble.n	8001734 <_Z6setPWMP9motor_drv+0x2c>
		ch1_pulse = motor_drv->htim->Init.Period;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60fb      	str	r3, [r7, #12]
		ch2_pulse = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	e02d      	b.n	8001790 <_Z6setPWMP9motor_drv+0x88>
	}
	else if(-motor_drv->pulse > (int32_t) motor_drv->htim->Init.Period){
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	425b      	negs	r3, r3
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68d2      	ldr	r2, [r2, #12]
 800173e:	68d2      	ldr	r2, [r2, #12]
 8001740:	4293      	cmp	r3, r2
 8001742:	dd06      	ble.n	8001752 <_Z6setPWMP9motor_drv+0x4a>
		ch1_pulse = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
		ch2_pulse = motor_drv->htim->Init.Period;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	e01e      	b.n	8001790 <_Z6setPWMP9motor_drv+0x88>
	}
	else if(motor_drv->pulse >= 0){
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <_Z6setPWMP9motor_drv+0x6a>
		ch1_pulse =  motor_drv->htim->Init.Period;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60fb      	str	r3, [r7, #12]
		ch2_pulse =  motor_drv->htim->Init.Period - (uint32_t)(motor_drv->pulse);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	e00e      	b.n	8001790 <_Z6setPWMP9motor_drv+0x88>
	}
	else if(motor_drv->pulse < 0){
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da0a      	bge.n	8001790 <_Z6setPWMP9motor_drv+0x88>
		ch1_pulse =  motor_drv->htim->Init.Period - (uint32_t)(-motor_drv->pulse);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	4413      	add	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
		ch2_pulse =  motor_drv->htim->Init.Period;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	60bb      	str	r3, [r7, #8]
	}


	if (motor_drv->pulse >= 0) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0b      	blt.n	80017b0 <_Z6setPWMP9motor_drv+0xa8>
		ch1_pulse = motor_drv->htim->Init.Period;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	60fb      	str	r3, [r7, #12]
		ch2_pulse = motor_drv->htim->Init.Period - motor_drv->pulse;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	e00a      	b.n	80017c6 <_Z6setPWMP9motor_drv+0xbe>
	} else {
		ch1_pulse = motor_drv->htim->Init.Period + motor_drv->pulse;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
		ch2_pulse = motor_drv->htim->Init.Period;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
	}

	if (ch1_pulse > motor_drv->htim->Init.Period) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d906      	bls.n	80017e0 <_Z6setPWMP9motor_drv+0xd8>
		ch1_pulse = motor_drv->htim->Init.Period;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60fb      	str	r3, [r7, #12]
		ch2_pulse = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	e00b      	b.n	80017f8 <_Z6setPWMP9motor_drv+0xf0>
	} else if (ch2_pulse > motor_drv->htim->Init.Period) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d905      	bls.n	80017f8 <_Z6setPWMP9motor_drv+0xf0>
		ch1_pulse = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
		ch2_pulse = motor_drv->htim->Init.Period;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	60bb      	str	r3, [r7, #8]
	}

	__HAL_TIM_SET_COMPARE(motor_drv->htim, motor_drv->chan_1, ch1_pulse);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <_Z6setPWMP9motor_drv+0x104>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
 800180a:	e018      	b.n	800183e <_Z6setPWMP9motor_drv+0x136>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d105      	bne.n	8001820 <_Z6setPWMP9motor_drv+0x118>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
 800181e:	e00e      	b.n	800183e <_Z6setPWMP9motor_drv+0x136>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d105      	bne.n	8001834 <_Z6setPWMP9motor_drv+0x12c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c
 8001832:	e004      	b.n	800183e <_Z6setPWMP9motor_drv+0x136>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(motor_drv->htim, motor_drv->chan_2, ch2_pulse);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <_Z6setPWMP9motor_drv+0x14a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001850:	e018      	b.n	8001884 <_Z6setPWMP9motor_drv+0x17c>
	__HAL_TIM_SET_COMPARE(motor_drv->htim, motor_drv->chan_2, ch2_pulse);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b04      	cmp	r3, #4
 8001858:	d105      	bne.n	8001866 <_Z6setPWMP9motor_drv+0x15e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001864:	e00e      	b.n	8001884 <_Z6setPWMP9motor_drv+0x17c>
	__HAL_TIM_SET_COMPARE(motor_drv->htim, motor_drv->chan_2, ch2_pulse);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d105      	bne.n	800187a <_Z6setPWMP9motor_drv+0x172>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001878:	e004      	b.n	8001884 <_Z6setPWMP9motor_drv+0x17c>
	__HAL_TIM_SET_COMPARE(motor_drv->htim, motor_drv->chan_2, ch2_pulse);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_ZN5ServoC1EP17TIM_HandleTypeDefmS1_>:
#include "servo_driver.h"




Servo::Servo(TIM_HandleTypeDef* PWMHandle, uint32_t channel, TIM_HandleTypeDef* StopwatchHandle) : htim(PWMHandle), timer_channel(channel), hSW(StopwatchHandle){
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <_ZN5ServoC1EP17TIM_HandleTypeDefmS1_+0x48>)
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	22b4      	movs	r2, #180	; 0xb4
 80018b0:	811a      	strh	r2, [r3, #8]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	615a      	str	r2, [r3, #20]
	processing_flag = 0;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	729a      	strb	r2, [r3, #10]
}
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40200000 	.word	0x40200000

080018dc <_ZN5Servo8setAngleEm>:

    HAL_TIM_Base_Start(hSW);
    processing_flag = 1;
}

void Servo::setAngle(uint32_t position_deg) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	  // Ensure the input is within the valid range
	  if (position_deg > max_rot) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	891b      	ldrh	r3, [r3, #8]
 80018ea:	461a      	mov	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d902      	bls.n	80018f8 <_ZN5Servo8setAngleEm+0x1c>
		  position_deg = max_rot;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	891b      	ldrh	r3, [r3, #8]
 80018f6:	603b      	str	r3, [r7, #0]
	  }

	  // Compute pulse width based on desired position
	  float pulse_width_ms = min_pulse + (max_pulse - min_pulse) * position_deg / max_rot;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 6a01 	vldr	s13, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001918:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	891b      	ldrh	r3, [r3, #8]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001928:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	edc7 7a03 	vstr	s15, [r7, #12]

	  // Compute compare register value
	  uint32_t compare_value = static_cast<uint32_t>((clock_freq / (prescaler + 1)) * pulse_width_ms / 1000);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699a      	ldr	r2, [r3, #24]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800194a:	edd7 7a03 	vldr	s15, [r7, #12]
 800194e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001952:	eddf 6a19 	vldr	s13, [pc, #100]	; 80019b8 <_ZN5Servo8setAngleEm+0xdc>
 8001956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195e:	ee17 3a90 	vmov	r3, s15
 8001962:	60bb      	str	r3, [r7, #8]

	  __HAL_TIM_SET_COMPARE(htim, timer_channel, compare_value);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <_ZN5Servo8setAngleEm+0x9c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001976:	e018      	b.n	80019aa <_ZN5Servo8setAngleEm+0xce>
	  __HAL_TIM_SET_COMPARE(htim, timer_channel, compare_value);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d105      	bne.n	800198c <_ZN5Servo8setAngleEm+0xb0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
}
 800198a:	e00e      	b.n	80019aa <_ZN5Servo8setAngleEm+0xce>
	  __HAL_TIM_SET_COMPARE(htim, timer_channel, compare_value);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b08      	cmp	r3, #8
 8001992:	d105      	bne.n	80019a0 <_ZN5Servo8setAngleEm+0xc4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800199e:	e004      	b.n	80019aa <_ZN5Servo8setAngleEm+0xce>
	  __HAL_TIM_SET_COMPARE(htim, timer_channel, compare_value);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	447a0000 	.word	0x447a0000

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_MspInit+0x4c>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_ADC_MspInit+0x7c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d127      	bne.n	8001a7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_ADC_MspInit+0x80>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <HAL_ADC_MspInit+0x80>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_ADC_MspInit+0x80>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_ADC_MspInit+0x80>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_ADC_MspInit+0x80>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_ADC_MspInit+0x80>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBAT_ADC_Pin;
 8001a66:	2310      	movs	r3, #16
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_ADC_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_ADC_MspInit+0x84>)
 8001a7a:	f000 fff1 	bl	8002a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_I2C_MspInit+0x84>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d12b      	bne.n	8001b0e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_I2C_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_I2C_MspInit+0x88>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_I2C_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad6:	2312      	movs	r3, #18
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <HAL_I2C_MspInit+0x8c>)
 8001aee:	f000 ffb7 	bl	8002a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_I2C_MspInit+0x88>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_I2C_MspInit+0x88>)
 8001afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_I2C_MspInit+0x88>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020400 	.word	0x40020400

08001b24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <HAL_TIM_PWM_MspInit+0xd0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d116      	bne.n	8001b64 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2019      	movs	r0, #25
 8001b58:	f000 feb9 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b5c:	2019      	movs	r0, #25
 8001b5e:	f000 fed2 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b62:	e042      	b.n	8001bea <HAL_TIM_PWM_MspInit+0xc6>
  else if(htim_pwm->Instance==TIM2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d10e      	bne.n	8001b8c <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
}
 8001b8a:	e02e      	b.n	8001bea <HAL_TIM_PWM_MspInit+0xc6>
  else if(htim_pwm->Instance==TIM3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <HAL_TIM_PWM_MspInit+0xd8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10e      	bne.n	8001bb4 <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	e01a      	b.n	8001bea <HAL_TIM_PWM_MspInit+0xc6>
  else if(htim_pwm->Instance==TIM4)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_TIM_PWM_MspInit+0xdc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d115      	bne.n	8001bea <HAL_TIM_PWM_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_TIM_PWM_MspInit+0xd4>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	201e      	movs	r0, #30
 8001be0:	f000 fe75 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001be4:	201e      	movs	r0, #30
 8001be6:	f000 fe8e 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800

08001c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <HAL_TIM_Base_MspInit+0x70>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_TIM_Base_MspInit+0x74>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_TIM_Base_MspInit+0x74>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_TIM_Base_MspInit+0x74>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001c32:	e01a      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_TIM_Base_MspInit+0x78>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d115      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_TIM_Base_MspInit+0x74>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_TIM_Base_MspInit+0x74>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_TIM_Base_MspInit+0x74>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2019      	movs	r0, #25
 8001c60:	f000 fe35 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c64:	2019      	movs	r0, #25
 8001c66:	f000 fe4e 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40014400 	.word	0x40014400

08001c80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <HAL_TIM_MspPostInit+0x144>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d11f      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b45      	ldr	r3, [pc, #276]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M2_PWM_IN2_Pin|M2_PWM_IN1_Pin;
 8001cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	483c      	ldr	r0, [pc, #240]	; (8001dcc <HAL_TIM_MspPostInit+0x14c>)
 8001cdc:	f000 fec0 	bl	8002a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ce0:	e06b      	b.n	8001dba <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cea:	d11e      	bne.n	8001d2a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M1_PWM_IN2_Pin|M1_PWM_IN1_Pin;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	482a      	ldr	r0, [pc, #168]	; (8001dcc <HAL_TIM_MspPostInit+0x14c>)
 8001d24:	f000 fe9c 	bl	8002a60 <HAL_GPIO_Init>
}
 8001d28:	e047      	b.n	8001dba <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_TIM_MspPostInit+0x150>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d11e      	bne.n	8001d72 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6313      	str	r3, [r2, #48]	; 0x30
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_PWM_IN2_Pin|M3_PWM_IN1_Pin;
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d60:	2302      	movs	r3, #2
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4818      	ldr	r0, [pc, #96]	; (8001dcc <HAL_TIM_MspPostInit+0x14c>)
 8001d6c:	f000 fe78 	bl	8002a60 <HAL_GPIO_Init>
}
 8001d70:	e023      	b.n	8001dba <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_TIM_MspPostInit+0x154>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d11e      	bne.n	8001dba <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_TIM_MspPostInit+0x148>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SORT_SERVO_PWM_Pin|GATE_SERVO_PWM_Pin;
 8001d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001daa:	2302      	movs	r3, #2
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <HAL_TIM_MspPostInit+0x158>)
 8001db6:	f000 fe53 	bl	8002a60 <HAL_GPIO_Init>
}
 8001dba:	bf00      	nop
 8001dbc:	3730      	adds	r7, #48	; 0x30
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40020400 	.word	0x40020400

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_UART_MspInit+0x148>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d153      	bne.n	8001ea6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e08:	f043 0310 	orr.w	r3, r3, #16
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a41      	ldr	r2, [pc, #260]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = EXT_TX_Pin;
 8001e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e64:	2307      	movs	r3, #7
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EXT_TX_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482f      	ldr	r0, [pc, #188]	; (8001f2c <HAL_UART_MspInit+0x150>)
 8001e70:	f000 fdf6 	bl	8002a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXT_RX_Pin;
 8001e74:	2308      	movs	r3, #8
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e84:	2307      	movs	r3, #7
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EXT_RX_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4828      	ldr	r0, [pc, #160]	; (8001f30 <HAL_UART_MspInit+0x154>)
 8001e90:	f000 fde6 	bl	8002a60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2025      	movs	r0, #37	; 0x25
 8001e9a:	f000 fd18 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9e:	2025      	movs	r0, #37	; 0x25
 8001ea0:	f000 fd31 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ea4:	e039      	b.n	8001f1a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_UART_MspInit+0x158>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d134      	bne.n	8001f1a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6313      	str	r3, [r2, #48]	; 0x30
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_UART_MspInit+0x14c>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLUE_TX_Pin|BLUE_RX_Pin;
 8001ee8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001efa:	2308      	movs	r3, #8
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4809      	ldr	r0, [pc, #36]	; (8001f2c <HAL_UART_MspInit+0x150>)
 8001f06:	f000 fdab 	bl	8002a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2047      	movs	r0, #71	; 0x47
 8001f10:	f000 fcdd 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f14:	2047      	movs	r0, #71	; 0x47
 8001f16:	f000 fcf6 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3730      	adds	r7, #48	; 0x30
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40011000 	.word	0x40011000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40011400 	.word	0x40011400

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <NMI_Handler+0x4>

08001f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f84:	f000 f936 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_OUTA_Pin);
 8001f90:	2004      	movs	r0, #4
 8001f92:	f000 ff01 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_OUTB_Pin);
 8001f9e:	2008      	movs	r0, #8
 8001fa0:	f000 fefa 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001fae:	f002 fd39 	bl	8004a24 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001fb4:	f002 fd36 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000015c 	.word	0x2000015c
 8001fc0:	200002c4 	.word	0x200002c4

08001fc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM4_IRQHandler+0x10>)
 8001fca:	f002 fd2b 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000234 	.word	0x20000234

08001fd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <USART1_IRQHandler+0x10>)
 8001fde:	f003 fc8b 	bl	80058f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000030c 	.word	0x2000030c

08001fec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_LINE_OUT_Pin);
 8001ff0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ff4:	f000 fed0 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_LINE_OUT_Pin);
 8001ff8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ffc:	f000 fecc 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_OUTB_Pin);
 8002000:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002004:	f000 fec8 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_OUTA_Pin);
 8002008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800200c:	f000 fec4 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <USART6_IRQHandler+0x10>)
 800201a:	f003 fc6d 	bl	80058f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000350 	.word	0x20000350

08002028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_kill>:

int _kill(int pid, int sig)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002042:	f004 fbe9 	bl	8006818 <__errno>
 8002046:	4603      	mov	r3, r0
 8002048:	2216      	movs	r2, #22
 800204a:	601a      	str	r2, [r3, #0]
  return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_exit>:

void _exit (int status)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffe7 	bl	8002038 <_kill>
  while (1) {}    /* Make sure we hang here */
 800206a:	e7fe      	b.n	800206a <_exit+0x12>

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f004 fbbc 	bl	8006818 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20020000 	.word	0x20020000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	200003e8 	.word	0x200003e8
 80020d4:	20000408 	.word	0x20000408

080020d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002118:	4c0b      	ldr	r4, [pc, #44]	; (8002148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002126:	f7ff ffd7 	bl	80020d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212a:	f004 fb7b 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7fe fc9b 	bl	8000a68 <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002140:	080073c4 	.word	0x080073c4
  ldr r2, =_sbss
 8002144:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002148:	20000404 	.word	0x20000404

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 fb9d 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	200f      	movs	r0, #15
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff fc1a 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fbb5 	bl	8002922 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d0:	f000 fb7d 	bl	80028ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000034 	.word	0x20000034
 80021ec:	2000003c 	.word	0x2000003c
 80021f0:	20000038 	.word	0x20000038

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000003c 	.word	0x2000003c
 8002218:	200003ec 	.word	0x200003ec

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200003ec 	.word	0x200003ec

08002234 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e033      	b.n	80022b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fbda 	bl	8001a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800227a:	f023 0302 	bic.w	r3, r3, #2
 800227e:	f043 0202 	orr.w	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f94a 	bl	8002520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
 80022a2:	e001      	b.n	80022a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1c>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e113      	b.n	8002500 <HAL_ADC_ConfigChannel+0x244>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b09      	cmp	r3, #9
 80022e6:	d925      	bls.n	8002334 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68d9      	ldr	r1, [r3, #12]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	3b1e      	subs	r3, #30
 80022fe:	2207      	movs	r2, #7
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43da      	mvns	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	400a      	ands	r2, r1
 800230c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68d9      	ldr	r1, [r3, #12]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	4603      	mov	r3, r0
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4403      	add	r3, r0
 8002326:	3b1e      	subs	r3, #30
 8002328:	409a      	lsls	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	e022      	b.n	800237a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	2207      	movs	r2, #7
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	400a      	ands	r2, r1
 8002356:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6919      	ldr	r1, [r3, #16]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	4603      	mov	r3, r0
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4403      	add	r3, r0
 8002370:	409a      	lsls	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b06      	cmp	r3, #6
 8002380:	d824      	bhi.n	80023cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b05      	subs	r3, #5
 8002394:	221f      	movs	r2, #31
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	400a      	ands	r2, r1
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	3b05      	subs	r3, #5
 80023be:	fa00 f203 	lsl.w	r2, r0, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ca:	e04c      	b.n	8002466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	d824      	bhi.n	800241e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b23      	subs	r3, #35	; 0x23
 80023e6:	221f      	movs	r2, #31
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43da      	mvns	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	400a      	ands	r2, r1
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4618      	mov	r0, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b23      	subs	r3, #35	; 0x23
 8002410:	fa00 f203 	lsl.w	r2, r0, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
 800241c:	e023      	b.n	8002466 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b41      	subs	r3, #65	; 0x41
 8002430:	221f      	movs	r2, #31
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	400a      	ands	r2, r1
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	3b41      	subs	r3, #65	; 0x41
 800245a:	fa00 f203 	lsl.w	r2, r0, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_ADC_ConfigChannel+0x250>)
 8002468:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a28      	ldr	r2, [pc, #160]	; (8002510 <HAL_ADC_ConfigChannel+0x254>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10f      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x1d8>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b12      	cmp	r3, #18
 800247a:	d10b      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_ADC_ConfigChannel+0x254>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d12b      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x23a>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_ADC_ConfigChannel+0x258>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d003      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x1f4>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b11      	cmp	r3, #17
 80024ae:	d122      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_ADC_ConfigChannel+0x258>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d111      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_ADC_ConfigChannel+0x25c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_ADC_ConfigChannel+0x260>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	40012000 	.word	0x40012000
 8002514:	10000012 	.word	0x10000012
 8002518:	20000034 	.word	0x20000034
 800251c:	431bde83 	.word	0x431bde83

08002520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002528:	4b79      	ldr	r3, [pc, #484]	; (8002710 <ADC_Init+0x1f0>)
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	021a      	lsls	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6899      	ldr	r1, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	4a58      	ldr	r2, [pc, #352]	; (8002714 <ADC_Init+0x1f4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d022      	beq.n	80025fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e00f      	b.n	800261e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800260c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800261c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0202 	bic.w	r2, r2, #2
 800262c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e1b      	ldrb	r3, [r3, #24]
 8002638:	005a      	lsls	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800266a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	3b01      	subs	r3, #1
 8002678:	035a      	lsls	r2, r3, #13
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	e007      	b.n	8002694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	051a      	lsls	r2, r3, #20
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d6:	025a      	lsls	r2, r3, #9
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	029a      	lsls	r2, r3, #10
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40012300 	.word	0x40012300
 8002714:	0f000001 	.word	0x0f000001

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002898:	f7ff ff8e 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff29 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff3e 	bl	8002760 <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff8e 	bl	800280c <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5d 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff31 	bl	800277c <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa2 	bl	8002874 <SysTick_Config>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff fc68 	bl	800221c <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d008      	beq.n	800296c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e052      	b.n	8002a12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0216 	bic.w	r2, r2, #22
 800297a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800298a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <HAL_DMA_Abort+0x62>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0208 	bic.w	r2, r2, #8
 80029aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029bc:	e013      	b.n	80029e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029be:	f7ff fc2d 	bl	800221c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d90c      	bls.n	80029e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e015      	b.n	8002a12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e4      	bne.n	80029be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	223f      	movs	r2, #63	; 0x3f
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e00c      	b.n	8002a52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2205      	movs	r2, #5
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e159      	b.n	8002d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	f040 8148 	bne.w	8002d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d005      	beq.n	8002ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d130      	bne.n	8002b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 0201 	and.w	r2, r3, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d017      	beq.n	8002b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d123      	bne.n	8002ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3208      	adds	r2, #8
 8002b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	220f      	movs	r2, #15
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	08da      	lsrs	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3208      	adds	r2, #8
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a2 	beq.w	8002d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b57      	ldr	r3, [pc, #348]	; (8002d48 <HAL_GPIO_Init+0x2e8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a56      	ldr	r2, [pc, #344]	; (8002d48 <HAL_GPIO_Init+0x2e8>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_GPIO_Init+0x2e8>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c02:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_GPIO_Init+0x2ec>)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3302      	adds	r3, #2
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a49      	ldr	r2, [pc, #292]	; (8002d50 <HAL_GPIO_Init+0x2f0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d019      	beq.n	8002c62 <HAL_GPIO_Init+0x202>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a48      	ldr	r2, [pc, #288]	; (8002d54 <HAL_GPIO_Init+0x2f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x1fe>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a47      	ldr	r2, [pc, #284]	; (8002d58 <HAL_GPIO_Init+0x2f8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x1fa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a46      	ldr	r2, [pc, #280]	; (8002d5c <HAL_GPIO_Init+0x2fc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x1f6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a45      	ldr	r2, [pc, #276]	; (8002d60 <HAL_GPIO_Init+0x300>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x1f2>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	e008      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c52:	2307      	movs	r3, #7
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e004      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c62:	2300      	movs	r3, #0
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f002 0203 	and.w	r2, r2, #3
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4093      	lsls	r3, r2
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c74:	4935      	ldr	r1, [pc, #212]	; (8002d4c <HAL_GPIO_Init+0x2ec>)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c82:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca6:	4a2f      	ldr	r2, [pc, #188]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd0:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d24:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	f67f aea2 	bls.w	8002a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3724      	adds	r7, #36	; 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020c00 	.word	0x40020c00
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e001      	b.n	8002d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fbde 	bl	8001578 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e12b      	b.n	8003032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fe50 	bl	8001a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e2c:	f001 fbbc 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8002e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a81      	ldr	r2, [pc, #516]	; (800303c <HAL_I2C_Init+0x274>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d807      	bhi.n	8002e4c <HAL_I2C_Init+0x84>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a80      	ldr	r2, [pc, #512]	; (8003040 <HAL_I2C_Init+0x278>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bf94      	ite	ls
 8002e44:	2301      	movls	r3, #1
 8002e46:	2300      	movhi	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e006      	b.n	8002e5a <HAL_I2C_Init+0x92>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a7d      	ldr	r2, [pc, #500]	; (8003044 <HAL_I2C_Init+0x27c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	bf94      	ite	ls
 8002e54:	2301      	movls	r3, #1
 8002e56:	2300      	movhi	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0e7      	b.n	8003032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a78      	ldr	r2, [pc, #480]	; (8003048 <HAL_I2C_Init+0x280>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0c9b      	lsrs	r3, r3, #18
 8002e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a6a      	ldr	r2, [pc, #424]	; (800303c <HAL_I2C_Init+0x274>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d802      	bhi.n	8002e9c <HAL_I2C_Init+0xd4>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	e009      	b.n	8002eb0 <HAL_I2C_Init+0xe8>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	4a69      	ldr	r2, [pc, #420]	; (800304c <HAL_I2C_Init+0x284>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	3301      	adds	r3, #1
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ec2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	495c      	ldr	r1, [pc, #368]	; (800303c <HAL_I2C_Init+0x274>)
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d819      	bhi.n	8002f04 <HAL_I2C_Init+0x13c>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e59      	subs	r1, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ede:	1c59      	adds	r1, r3, #1
 8002ee0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_I2C_Init+0x138>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e59      	subs	r1, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efe:	e051      	b.n	8002fa4 <HAL_I2C_Init+0x1dc>
 8002f00:	2304      	movs	r3, #4
 8002f02:	e04f      	b.n	8002fa4 <HAL_I2C_Init+0x1dc>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d111      	bne.n	8002f30 <HAL_I2C_Init+0x168>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e58      	subs	r0, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e012      	b.n	8002f56 <HAL_I2C_Init+0x18e>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	0099      	lsls	r1, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Init+0x196>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e022      	b.n	8002fa4 <HAL_I2C_Init+0x1dc>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10e      	bne.n	8002f84 <HAL_I2C_Init+0x1bc>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e58      	subs	r0, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	440b      	add	r3, r1
 8002f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f82:	e00f      	b.n	8002fa4 <HAL_I2C_Init+0x1dc>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	6809      	ldr	r1, [r1, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6911      	ldr	r1, [r2, #16]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	4311      	orrs	r1, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	000186a0 	.word	0x000186a0
 8003040:	001e847f 	.word	0x001e847f
 8003044:	003d08ff 	.word	0x003d08ff
 8003048:	431bde83 	.word	0x431bde83
 800304c:	10624dd3 	.word	0x10624dd3

08003050 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	460b      	mov	r3, r1
 8003064:	813b      	strh	r3, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800306a:	f7ff f8d7 	bl	800221c <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b20      	cmp	r3, #32
 800307a:	f040 80d9 	bne.w	8003230 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2319      	movs	r3, #25
 8003084:	2201      	movs	r2, #1
 8003086:	496d      	ldr	r1, [pc, #436]	; (800323c <HAL_I2C_Mem_Write+0x1ec>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fc7f 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
 8003096:	e0cc      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Mem_Write+0x56>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0c5      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d007      	beq.n	80030cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2221      	movs	r2, #33	; 0x21
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2240      	movs	r2, #64	; 0x40
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a4d      	ldr	r2, [pc, #308]	; (8003240 <HAL_I2C_Mem_Write+0x1f0>)
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800310e:	88f8      	ldrh	r0, [r7, #6]
 8003110:	893a      	ldrh	r2, [r7, #8]
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4603      	mov	r3, r0
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fab6 	bl	8003690 <I2C_RequestMemoryWrite>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d052      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e081      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fd00 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2b04      	cmp	r3, #4
 8003144:	d107      	bne.n	8003156 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003154:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06b      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d11b      	bne.n	80031d0 <HAL_I2C_Mem_Write+0x180>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1aa      	bne.n	800312e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fcec 	bl	8003bba <I2C_WaitOnBTFFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d107      	bne.n	8003200 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e016      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	00100002 	.word	0x00100002
 8003240:	ffff0000 	.word	0xffff0000

08003244 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	4608      	mov	r0, r1
 800324e:	4611      	mov	r1, r2
 8003250:	461a      	mov	r2, r3
 8003252:	4603      	mov	r3, r0
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	460b      	mov	r3, r1
 8003258:	813b      	strh	r3, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800325e:	f7fe ffdd 	bl	800221c <HAL_GetTick>
 8003262:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	f040 8208 	bne.w	8003682 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2319      	movs	r3, #25
 8003278:	2201      	movs	r2, #1
 800327a:	497b      	ldr	r1, [pc, #492]	; (8003468 <HAL_I2C_Mem_Read+0x224>)
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fb85 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
 800328a:	e1fb      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_I2C_Mem_Read+0x56>
 8003296:	2302      	movs	r3, #2
 8003298:	e1f4      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d007      	beq.n	80032c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2222      	movs	r2, #34	; 0x22
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a5b      	ldr	r2, [pc, #364]	; (800346c <HAL_I2C_Mem_Read+0x228>)
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003302:	88f8      	ldrh	r0, [r7, #6]
 8003304:	893a      	ldrh	r2, [r7, #8]
 8003306:	8979      	ldrh	r1, [r7, #10]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4603      	mov	r3, r0
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fa52 	bl	80037bc <I2C_RequestMemoryRead>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1b0      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d113      	bne.n	8003352 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	623b      	str	r3, [r7, #32]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e184      	b.n	800365c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b01      	cmp	r3, #1
 8003358:	d11b      	bne.n	8003392 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003368:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e164      	b.n	800365c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003396:	2b02      	cmp	r3, #2
 8003398:	d11b      	bne.n	80033d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	e144      	b.n	800365c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033e8:	e138      	b.n	800365c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	f200 80f1 	bhi.w	80035d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d123      	bne.n	8003444 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fc1b 	bl	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e139      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003442:	e10b      	b.n	800365c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	2b02      	cmp	r3, #2
 800344a:	d14e      	bne.n	80034ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	2200      	movs	r2, #0
 8003454:	4906      	ldr	r1, [pc, #24]	; (8003470 <HAL_I2C_Mem_Read+0x22c>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa98 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e10e      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
 8003466:	bf00      	nop
 8003468:	00100002 	.word	0x00100002
 800346c:	ffff0000 	.word	0xffff0000
 8003470:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e8:	e0b8      	b.n	800365c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2200      	movs	r2, #0
 80034f2:	4966      	ldr	r1, [pc, #408]	; (800368c <HAL_I2C_Mem_Read+0x448>)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fa49 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0bf      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	2200      	movs	r2, #0
 800354e:	494f      	ldr	r1, [pc, #316]	; (800368c <HAL_I2C_Mem_Read+0x448>)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fa1b 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e091      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035d4:	e042      	b.n	800365c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fb2e 	bl	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e04c      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b04      	cmp	r3, #4
 8003628:	d118      	bne.n	800365c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f aec2 	bne.w	80033ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	00010004 	.word	0x00010004

08003690 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f960 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e0:	d103      	bne.n	80036ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e05f      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	492d      	ldr	r1, [pc, #180]	; (80037b8 <I2C_RequestMemoryWrite+0x128>)
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f998 	bl	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04c      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa02 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e02b      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800375c:	893b      	ldrh	r3, [r7, #8]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]
 8003766:	e021      	b.n	80037ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003768:	893b      	ldrh	r3, [r7, #8]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	b29b      	uxth	r3, r3
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	6a39      	ldr	r1, [r7, #32]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f9dc 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b04      	cmp	r3, #4
 800378c:	d107      	bne.n	800379e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e005      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037a2:	893b      	ldrh	r3, [r7, #8]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	00010002 	.word	0x00010002

080037bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	817b      	strh	r3, [r7, #10]
 80037ce:	460b      	mov	r3, r1
 80037d0:	813b      	strh	r3, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f8c2 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381c:	d103      	bne.n	8003826 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0aa      	b.n	8003980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003838:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	6a3a      	ldr	r2, [r7, #32]
 800383e:	4952      	ldr	r1, [pc, #328]	; (8003988 <I2C_RequestMemoryRead+0x1cc>)
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f8fa 	bl	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e097      	b.n	8003980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003868:	6a39      	ldr	r1, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f964 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b04      	cmp	r3, #4
 800387c:	d107      	bne.n	800388e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e076      	b.n	8003980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003898:	893b      	ldrh	r3, [r7, #8]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	611a      	str	r2, [r3, #16]
 80038a2:	e021      	b.n	80038e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038a4:	893b      	ldrh	r3, [r7, #8]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	6a39      	ldr	r1, [r7, #32]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f93e 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d107      	bne.n	80038da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e050      	b.n	8003980 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038de:	893b      	ldrh	r3, [r7, #8]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	6a39      	ldr	r1, [r7, #32]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f923 	bl	8003b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d107      	bne.n	8003910 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e035      	b.n	8003980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003922:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	2200      	movs	r2, #0
 800392c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f82b 	bl	800398c <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394a:	d103      	bne.n	8003954 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e013      	b.n	8003980 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003958:	897b      	ldrh	r3, [r7, #10]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	6a3a      	ldr	r2, [r7, #32]
 800396c:	4906      	ldr	r1, [pc, #24]	; (8003988 <I2C_RequestMemoryRead+0x1cc>)
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f863 	bl	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	00010002 	.word	0x00010002

0800398c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399c:	e025      	b.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a4:	d021      	beq.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fe fc39 	bl	800221c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e023      	b.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10d      	bne.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	e00c      	b.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d0b6      	beq.n	800399e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a48:	e051      	b.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a58:	d123      	bne.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f043 0204 	orr.w	r2, r3, #4
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e046      	b.n	8003b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa8:	d021      	beq.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fe fbb7 	bl	800221c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e020      	b.n	8003b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10c      	bne.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4013      	ands	r3, r2
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e00b      	b.n	8003b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d18d      	bne.n	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b44:	e02d      	b.n	8003ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8ce 	bl	8003ce8 <I2C_IsAcknowledgeFailed>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e02d      	b.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b5c:	d021      	beq.n	8003ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5e:	f7fe fb5d 	bl	800221c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d116      	bne.n	8003ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e007      	b.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b80      	cmp	r3, #128	; 0x80
 8003bae:	d1ca      	bne.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc6:	e02d      	b.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f88d 	bl	8003ce8 <I2C_IsAcknowledgeFailed>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e02d      	b.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bde:	d021      	beq.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be0:	f7fe fb1c 	bl	800221c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d302      	bcc.n	8003bf6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e007      	b.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d1ca      	bne.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c48:	e042      	b.n	8003cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d119      	bne.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0210 	mvn.w	r2, #16
 8003c60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e029      	b.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fe fac6 	bl	800221c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d116      	bne.n	8003cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e007      	b.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d1b5      	bne.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d11b      	bne.n	8003d38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0204 	orr.w	r2, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e267      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d075      	beq.n	8003e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d66:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d00c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d72:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d112      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7e:	4b82      	ldr	r3, [pc, #520]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8a:	d10b      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05b      	beq.n	8003e50 <HAL_RCC_OscConfig+0x108>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d157      	bne.n	8003e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e242      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d106      	bne.n	8003dbc <HAL_RCC_OscConfig+0x74>
 8003dae:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a75      	ldr	r2, [pc, #468]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e01d      	b.n	8003df8 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x98>
 8003dc6:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6f      	ldr	r2, [pc, #444]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a6c      	ldr	r2, [pc, #432]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e00b      	b.n	8003df8 <HAL_RCC_OscConfig+0xb0>
 8003de0:	4b69      	ldr	r3, [pc, #420]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a68      	ldr	r2, [pc, #416]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe fa0c 	bl	800221c <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fe fa08 	bl	800221c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e207      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0xc0>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe f9f8 	bl	800221c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe f9f4 	bl	800221c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1f3      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0xe8>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d063      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d11c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d116      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_RCC_OscConfig+0x152>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e1c7      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4937      	ldr	r1, [pc, #220]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	e03a      	b.n	8003f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb8:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <HAL_RCC_OscConfig+0x244>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fe f9ad 	bl	800221c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec6:	f7fe f9a9 	bl	800221c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e1a8      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee4:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4925      	ldr	r1, [pc, #148]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
 8003ef8:	e015      	b.n	8003f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x244>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f98c 	bl	800221c <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f08:	f7fe f988 	bl	800221c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e187      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d036      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_RCC_OscConfig+0x248>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fe f96c 	bl	800221c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f48:	f7fe f968 	bl	800221c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e167      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x200>
 8003f66:	e01b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_OscConfig+0x248>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe f955 	bl	800221c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	e00e      	b.n	8003f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f76:	f7fe f951 	bl	800221c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d907      	bls.n	8003f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e150      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	42470000 	.word	0x42470000
 8003f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ea      	bne.n	8003f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8097 	beq.w	80040dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb2:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	4a7c      	ldr	r2, [pc, #496]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fce:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b77      	ldr	r3, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fea:	4b74      	ldr	r3, [pc, #464]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a73      	ldr	r2, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe f911 	bl	800221c <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fe f90d 	bl	800221c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e10c      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004010:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d106      	bne.n	8004032 <HAL_RCC_OscConfig+0x2ea>
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a63      	ldr	r2, [pc, #396]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	e01c      	b.n	800406c <HAL_RCC_OscConfig+0x324>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b05      	cmp	r3, #5
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x30c>
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a5e      	ldr	r2, [pc, #376]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 0304 	orr.w	r3, r3, #4
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a5b      	ldr	r2, [pc, #364]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0x324>
 8004054:	4b58      	ldr	r3, [pc, #352]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a57      	ldr	r2, [pc, #348]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004066:	f023 0304 	bic.w	r3, r3, #4
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fe f8d2 	bl	800221c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fe f8ce 	bl	800221c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0cb      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ee      	beq.n	800407c <HAL_RCC_OscConfig+0x334>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a0:	f7fe f8bc 	bl	800221c <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a6:	e00a      	b.n	80040be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fe f8b8 	bl	800221c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0b5      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040be:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ee      	bne.n	80040a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	4a38      	ldr	r2, [pc, #224]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80a1 	beq.w	8004228 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e6:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d05c      	beq.n	80041ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d141      	bne.n	800417e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe f88c 	bl	800221c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fe f888 	bl	800221c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e087      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	019b      	lsls	r3, r3, #6
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	3b01      	subs	r3, #1
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	061b      	lsls	r3, r3, #24
 800414a:	491b      	ldr	r1, [pc, #108]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fe f861 	bl	800221c <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415e:	f7fe f85d 	bl	800221c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e05c      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x416>
 800417c:	e054      	b.n	8004228 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe f84a 	bl	800221c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe f846 	bl	800221c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e045      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x444>
 80041aa:	e03d      	b.n	8004228 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e038      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x4ec>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d028      	beq.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d121      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d11a      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0cc      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d90c      	bls.n	8004274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b8      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	494d      	ldr	r1, [pc, #308]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d044      	beq.n	8004358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d119      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e067      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4934      	ldr	r1, [pc, #208]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004328:	f7fd ff78 	bl	800221c <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fd ff74 	bl	800221c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e04f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d20c      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e032      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4916      	ldr	r1, [pc, #88]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043be:	f000 f821 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	490a      	ldr	r1, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd fed8 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023c00 	.word	0x40023c00
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08007364 	.word	0x08007364
 80043fc:	20000034 	.word	0x20000034
 8004400:	20000038 	.word	0x20000038

08004404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b090      	sub	sp, #64	; 0x40
 800440a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	2300      	movs	r3, #0
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004414:	2300      	movs	r3, #0
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b08      	cmp	r3, #8
 8004426:	d00d      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x40>
 8004428:	2b08      	cmp	r3, #8
 800442a:	f200 80a1 	bhi.w	8004570 <HAL_RCC_GetSysClockFreq+0x16c>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x34>
 8004432:	2b04      	cmp	r3, #4
 8004434:	d003      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x3a>
 8004436:	e09b      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_GetSysClockFreq+0x184>)
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800443c:	e09b      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443e:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCC_GetSysClockFreq+0x188>)
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004442:	e098      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004444:	4b4f      	ldr	r3, [pc, #316]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800444e:	4b4d      	ldr	r3, [pc, #308]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d028      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445a:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	2200      	movs	r2, #0
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	627a      	str	r2, [r7, #36]	; 0x24
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800446c:	2100      	movs	r1, #0
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_GetSysClockFreq+0x188>)
 8004470:	fb03 f201 	mul.w	r2, r3, r1
 8004474:	2300      	movs	r3, #0
 8004476:	fb00 f303 	mul.w	r3, r0, r3
 800447a:	4413      	add	r3, r2
 800447c:	4a43      	ldr	r2, [pc, #268]	; (800458c <HAL_RCC_GetSysClockFreq+0x188>)
 800447e:	fba0 1202 	umull	r1, r2, r0, r2
 8004482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004484:	460a      	mov	r2, r1
 8004486:	62ba      	str	r2, [r7, #40]	; 0x28
 8004488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448a:	4413      	add	r3, r2
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	2200      	movs	r2, #0
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800449e:	f7fb ff07 	bl	80002b0 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4613      	mov	r3, r2
 80044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044aa:	e053      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	2200      	movs	r2, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	617a      	str	r2, [r7, #20]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044be:	f04f 0b00 	mov.w	fp, #0
 80044c2:	4652      	mov	r2, sl
 80044c4:	465b      	mov	r3, fp
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	0159      	lsls	r1, r3, #5
 80044d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d4:	0150      	lsls	r0, r2, #5
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	ebb2 080a 	subs.w	r8, r2, sl
 80044de:	eb63 090b 	sbc.w	r9, r3, fp
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044f6:	ebb2 0408 	subs.w	r4, r2, r8
 80044fa:	eb63 0509 	sbc.w	r5, r3, r9
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	00eb      	lsls	r3, r5, #3
 8004508:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800450c:	00e2      	lsls	r2, r4, #3
 800450e:	4614      	mov	r4, r2
 8004510:	461d      	mov	r5, r3
 8004512:	eb14 030a 	adds.w	r3, r4, sl
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	eb45 030b 	adc.w	r3, r5, fp
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800452a:	4629      	mov	r1, r5
 800452c:	028b      	lsls	r3, r1, #10
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004534:	4621      	mov	r1, r4
 8004536:	028a      	lsls	r2, r1, #10
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	2200      	movs	r2, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004548:	f7fb feb2 	bl	80002b0 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	3301      	adds	r3, #1
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800456e:	e002      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetSysClockFreq+0x184>)
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004578:	4618      	mov	r0, r3
 800457a:	3740      	adds	r7, #64	; 0x40
 800457c:	46bd      	mov	sp, r7
 800457e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	00f42400 	.word	0x00f42400
 800458c:	017d7840 	.word	0x017d7840

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000034 	.word	0x20000034

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ac:	f7ff fff0 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0a9b      	lsrs	r3, r3, #10
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40023800 	.word	0x40023800
 80045cc:	08007374 	.word	0x08007374

080045d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d4:	f7ff ffdc 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0b5b      	lsrs	r3, r3, #13
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08007374 	.word	0x08007374

080045f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e041      	b.n	800468e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd faf0 	bl	8001c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f000 fcae 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e044      	b.n	800473a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <HAL_TIM_Base_Start_IT+0xb0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d013      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	; (800474c <HAL_TIM_Base_Start_IT+0xb4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_TIM_Base_Start_IT+0xb8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a17      	ldr	r2, [pc, #92]	; (8004754 <HAL_TIM_Base_Start_IT+0xbc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIM_Base_Start_IT+0xc0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d111      	bne.n	8004728 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d010      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	e007      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40014000 	.word	0x40014000

0800475c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e041      	b.n	80047f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd f9ce 	bl	8001b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f000 fbfc 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x24>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e022      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d109      	bne.n	800483a <HAL_TIM_PWM_Start+0x3e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e015      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x58>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e008      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e068      	b.n	8004940 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0x82>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487c:	e013      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start+0x92>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	e00b      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	e003      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2201      	movs	r2, #1
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fe18 	bl	80054e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a23      	ldr	r2, [pc, #140]	; (8004948 <HAL_TIM_PWM_Start+0x14c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <HAL_TIM_PWM_Start+0x14c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d013      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a19      	ldr	r2, [pc, #100]	; (800494c <HAL_TIM_PWM_Start+0x150>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_TIM_PWM_Start+0x154>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_TIM_PWM_Start+0x158>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_TIM_PWM_Start+0x15c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d111      	bne.n	800492e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d010      	beq.n	800493e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	e007      	b.n	800493e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000

0800495c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fdb8 	bl	80054e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a29      	ldr	r2, [pc, #164]	; (8004a20 <HAL_TIM_PWM_Stop+0xc4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d117      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	f241 1311 	movw	r3, #4369	; 0x1111
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x52>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	f240 4344 	movw	r3, #1092	; 0x444
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x52>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <HAL_TIM_PWM_Stop+0x82>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	f240 4344 	movw	r3, #1092	; 0x444
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d107      	bne.n	80049de <HAL_TIM_PWM_Stop+0x82>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Stop+0x92>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	e013      	b.n	8004a16 <HAL_TIM_PWM_Stop+0xba>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Stop+0xa2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	e00b      	b.n	8004a16 <HAL_TIM_PWM_Stop+0xba>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Stop+0xb2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	e003      	b.n	8004a16 <HAL_TIM_PWM_Stop+0xba>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40010000 	.word	0x40010000

08004a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa77 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa69 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa7a 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0204 	mvn.w	r2, #4
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa4d 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa3f 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fa50 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0208 	mvn.w	r2, #8
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa23 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa15 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa26 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2208      	movs	r2, #8
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9f9 	bl	8004f5a <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9eb 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9fc 	bl	8004f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0201 	mvn.w	r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fca4 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fd78 	bl	80056c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9c1 	bl	8004f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d10e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0220 	mvn.w	r2, #32
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fd42 	bl	80056b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e0ae      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	f200 809f 	bhi.w	8004da0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004da1 	.word	0x08004da1
 8004c70:	08004da1 	.word	0x08004da1
 8004c74:	08004da1 	.word	0x08004da1
 8004c78:	08004cdd 	.word	0x08004cdd
 8004c7c:	08004da1 	.word	0x08004da1
 8004c80:	08004da1 	.word	0x08004da1
 8004c84:	08004da1 	.word	0x08004da1
 8004c88:	08004d1f 	.word	0x08004d1f
 8004c8c:	08004da1 	.word	0x08004da1
 8004c90:	08004da1 	.word	0x08004da1
 8004c94:	08004da1 	.word	0x08004da1
 8004c98:	08004d5f 	.word	0x08004d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f9f8 	bl	8005098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	619a      	str	r2, [r3, #24]
      break;
 8004cda:	e064      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fa3e 	bl	8005164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6999      	ldr	r1, [r3, #24]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	021a      	lsls	r2, r3, #8
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	619a      	str	r2, [r3, #24]
      break;
 8004d1c:	e043      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fa89 	bl	800523c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0208 	orr.w	r2, r2, #8
 8004d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0204 	bic.w	r2, r2, #4
 8004d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	61da      	str	r2, [r3, #28]
      break;
 8004d5c:	e023      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fad3 	bl	8005310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	021a      	lsls	r2, r3, #8
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	61da      	str	r2, [r3, #28]
      break;
 8004d9e:	e002      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
      break;
 8004da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0b4      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x186>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d03e      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0xd4>
 8004e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e12:	f200 8087 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	f000 8086 	beq.w	8004f2a <HAL_TIM_ConfigClockSource+0x172>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	d87f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b70      	cmp	r3, #112	; 0x70
 8004e26:	d01a      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0xa6>
 8004e28:	2b70      	cmp	r3, #112	; 0x70
 8004e2a:	d87b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b60      	cmp	r3, #96	; 0x60
 8004e2e:	d050      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e30:	2b60      	cmp	r3, #96	; 0x60
 8004e32:	d877      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b50      	cmp	r3, #80	; 0x50
 8004e36:	d03c      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d873      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d058      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d86f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d064      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d86b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d060      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d867      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05c      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d05a      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	e062      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6899      	ldr	r1, [r3, #8]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f000 fb19 	bl	80054a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	609a      	str	r2, [r3, #8]
      break;
 8004e8a:	e04f      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6899      	ldr	r1, [r3, #8]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f000 fb02 	bl	80054a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eae:	609a      	str	r2, [r3, #8]
      break;
 8004eb0:	e03c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fa76 	bl	80053b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2150      	movs	r1, #80	; 0x50
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 facf 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e02c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fa95 	bl	800540e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2160      	movs	r1, #96	; 0x60
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fabf 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e01c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fa56 	bl	80053b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2140      	movs	r1, #64	; 0x40
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 faaf 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f10:	e00c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f000 faa6 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004f22:	e003      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e000      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a34      	ldr	r2, [pc, #208]	; (800507c <TIM_Base_SetConfig+0xe4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00f      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb6:	d00b      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a31      	ldr	r2, [pc, #196]	; (8005080 <TIM_Base_SetConfig+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a30      	ldr	r2, [pc, #192]	; (8005084 <TIM_Base_SetConfig+0xec>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <TIM_Base_SetConfig+0xf0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a25      	ldr	r2, [pc, #148]	; (800507c <TIM_Base_SetConfig+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01b      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff0:	d017      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a22      	ldr	r2, [pc, #136]	; (8005080 <TIM_Base_SetConfig+0xe8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a21      	ldr	r2, [pc, #132]	; (8005084 <TIM_Base_SetConfig+0xec>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a20      	ldr	r2, [pc, #128]	; (8005088 <TIM_Base_SetConfig+0xf0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1f      	ldr	r2, [pc, #124]	; (800508c <TIM_Base_SetConfig+0xf4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <TIM_Base_SetConfig+0xf8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <TIM_Base_SetConfig+0xfc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a08      	ldr	r2, [pc, #32]	; (800507c <TIM_Base_SetConfig+0xe4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800

08005098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 0302 	bic.w	r3, r3, #2
 80050e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <TIM_OC1_SetConfig+0xc8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10c      	bne.n	800510e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0308 	bic.w	r3, r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <TIM_OC1_SetConfig+0xc8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d111      	bne.n	800513a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	621a      	str	r2, [r3, #32]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40010000 	.word	0x40010000

08005164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0210 	bic.w	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0320 	bic.w	r3, r3, #32
 80051ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <TIM_OC2_SetConfig+0xd4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10d      	bne.n	80051e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a15      	ldr	r2, [pc, #84]	; (8005238 <TIM_OC2_SetConfig+0xd4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d113      	bne.n	8005210 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000

0800523c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1d      	ldr	r2, [pc, #116]	; (800530c <TIM_OC3_SetConfig+0xd0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d10d      	bne.n	80052b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <TIM_OC3_SetConfig+0xd0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d113      	bne.n	80052e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40010000 	.word	0x40010000

08005310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a10      	ldr	r2, [pc, #64]	; (80053ac <TIM_OC4_SetConfig+0x9c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d109      	bne.n	8005384 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000

080053b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 030a 	bic.w	r3, r3, #10
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0210 	bic.w	r2, r3, #16
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800544a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	f043 0307 	orr.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2201      	movs	r2, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e050      	b.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d013      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10c      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40014000 	.word	0x40014000

0800560c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005624:	2302      	movs	r3, #2
 8005626:	e03d      	b.n	80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e03f      	b.n	800576a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fc fb6c 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800571a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fddf 	bl	80062e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b08a      	sub	sp, #40	; 0x28
 8005776:	af02      	add	r7, sp, #8
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	603b      	str	r3, [r7, #0]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b20      	cmp	r3, #32
 8005790:	d17c      	bne.n	800588c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_Transmit+0x2c>
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e075      	b.n	800588e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Transmit+0x3e>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e06e      	b.n	800588e <HAL_UART_Transmit+0x11c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2221      	movs	r2, #33	; 0x21
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c6:	f7fc fd29 	bl	800221c <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e0:	d108      	bne.n	80057f4 <HAL_UART_Transmit+0x82>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e003      	b.n	80057fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005804:	e02a      	b.n	800585c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fb1f 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e036      	b.n	800588e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005834:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	3302      	adds	r3, #2
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e007      	b.n	800584e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	3301      	adds	r3, #1
 800584c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1cf      	bne.n	8005806 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2200      	movs	r2, #0
 800586e:	2140      	movs	r1, #64	; 0x40
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 faef 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e006      	b.n	800588e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e000      	b.n	800588e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800588c:	2302      	movs	r3, #2
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	4613      	mov	r3, r2
 80058a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d11d      	bne.n	80058ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_UART_Receive_IT+0x26>
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e016      	b.n	80058ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_UART_Receive_IT+0x38>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e00f      	b.n	80058ee <HAL_UART_Receive_IT+0x58>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	461a      	mov	r2, r3
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fb24 	bl	8005f30 <UART_Start_Receive_IT>
 80058e8:	4603      	mov	r3, r0
 80058ea:	e000      	b.n	80058ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b0ba      	sub	sp, #232	; 0xe8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800591e:	2300      	movs	r3, #0
 8005920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005924:	2300      	movs	r3, #0
 8005926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10f      	bne.n	800595e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_UART_IRQHandler+0x66>
 800594a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fc07 	bl	800616a <UART_Receive_IT>
      return;
 800595c:	e256      	b.n	8005e0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800595e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80de 	beq.w	8005b24 <HAL_UART_IRQHandler+0x22c>
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005978:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80d1 	beq.w	8005b24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_UART_IRQHandler+0xae>
 800598e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f043 0201 	orr.w	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <HAL_UART_IRQHandler+0xd2>
 80059b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0202 	orr.w	r2, r3, #2
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_UART_IRQHandler+0xf6>
 80059d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f043 0204 	orr.w	r2, r3, #4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d011      	beq.n	8005a1e <HAL_UART_IRQHandler+0x126>
 80059fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d105      	bne.n	8005a12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0208 	orr.w	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 81ed 	beq.w	8005e02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_UART_IRQHandler+0x14e>
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fb92 	bl	800616a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <HAL_UART_IRQHandler+0x17a>
 8005a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d04f      	beq.n	8005b12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa9a 	bl	8005fac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	d141      	bne.n	8005b0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3314      	adds	r3, #20
 8005a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1d9      	bne.n	8005a86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d013      	beq.n	8005b02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	4a7d      	ldr	r2, [pc, #500]	; (8005cd4 <HAL_UART_IRQHandler+0x3dc>)
 8005ae0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fc ff97 	bl	8002a1a <HAL_DMA_Abort_IT>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d016      	beq.n	8005b20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005afc:	4610      	mov	r0, r2
 8005afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	e00e      	b.n	8005b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f990 	bl	8005e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	e00a      	b.n	8005b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f98c 	bl	8005e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e006      	b.n	8005b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f988 	bl	8005e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b1e:	e170      	b.n	8005e02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	bf00      	nop
    return;
 8005b22:	e16e      	b.n	8005e02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	f040 814a 	bne.w	8005dc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8143 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 813c 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	f040 80b4 	bne.w	8005cd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8140 	beq.w	8005e06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	f080 8139 	bcs.w	8005e06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba6:	f000 8088 	beq.w	8005cba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1d9      	bne.n	8005baa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e1      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3314      	adds	r3, #20
 8005c38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3314      	adds	r3, #20
 8005c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e3      	bne.n	8005c32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8a:	f023 0310 	bic.w	r3, r3, #16
 8005c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e3      	bne.n	8005c78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fc fe40 	bl	800293a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f8b6 	bl	8005e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cd0:	e099      	b.n	8005e06 <HAL_UART_IRQHandler+0x50e>
 8005cd2:	bf00      	nop
 8005cd4:	08006073 	.word	0x08006073
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 808b 	beq.w	8005e0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8086 	beq.w	8005e0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d22:	647a      	str	r2, [r7, #68]	; 0x44
 8005d24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e3      	bne.n	8005cfe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3314      	adds	r3, #20
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	623b      	str	r3, [r7, #32]
   return(result);
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3314      	adds	r3, #20
 8005d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e3      	bne.n	8005d36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005da0:	61fa      	str	r2, [r7, #28]
 8005da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e3      	bne.n	8005d7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f83e 	bl	8005e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dc0:	e023      	b.n	8005e0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_UART_IRQHandler+0x4ea>
 8005dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f95d 	bl	800609a <UART_Transmit_IT>
    return;
 8005de0:	e014      	b.n	8005e0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <HAL_UART_IRQHandler+0x514>
 8005dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f99d 	bl	800613a <UART_EndTransmit_IT>
    return;
 8005e00:	e004      	b.n	8005e0c <HAL_UART_IRQHandler+0x514>
    return;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <HAL_UART_IRQHandler+0x514>
      return;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <HAL_UART_IRQHandler+0x514>
      return;
 8005e0a:	bf00      	nop
  }
}
 8005e0c:	37e8      	adds	r7, #232	; 0xe8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop

08005e14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b090      	sub	sp, #64	; 0x40
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e64:	e050      	b.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e6c:	d04c      	beq.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e74:	f7fc f9d2 	bl	800221c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d241      	bcs.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	330c      	adds	r3, #12
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ea4:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e5      	bne.n	8005e84 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3314      	adds	r3, #20
 8005ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed8:	623a      	str	r2, [r7, #32]
 8005eda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	69f9      	ldr	r1, [r7, #28]
 8005ede:	6a3a      	ldr	r2, [r7, #32]
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e5      	bne.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e00f      	b.n	8005f28 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d09f      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3740      	adds	r7, #64	; 0x40
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	88fa      	ldrh	r2, [r7, #6]
 8005f48:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2222      	movs	r2, #34	; 0x22
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d007      	beq.n	8005f7e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0220 	orr.w	r2, r2, #32
 8005f9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b095      	sub	sp, #84	; 0x54
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd4:	643a      	str	r2, [r7, #64]	; 0x40
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3314      	adds	r3, #20
 8006006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	d119      	bne.n	8006058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	60bb      	str	r3, [r7, #8]
   return(result);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 0310 	bic.w	r3, r3, #16
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006044:	61ba      	str	r2, [r7, #24]
 8006046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	613b      	str	r3, [r7, #16]
   return(result);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e5      	bne.n	8006024 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006066:	bf00      	nop
 8006068:	3754      	adds	r7, #84	; 0x54
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff fecb 	bl	8005e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b21      	cmp	r3, #33	; 0x21
 80060ac:	d13e      	bne.n	800612c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	d114      	bne.n	80060e2 <UART_Transmit_IT+0x48>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d110      	bne.n	80060e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	621a      	str	r2, [r3, #32]
 80060e0:	e008      	b.n	80060f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	1c59      	adds	r1, r3, #1
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6211      	str	r1, [r2, #32]
 80060ec:	781a      	ldrb	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4619      	mov	r1, r3
 8006102:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10f      	bne.n	8006128 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006116:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006126:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006150:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fe5a 	bl	8005e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b08c      	sub	sp, #48	; 0x30
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b22      	cmp	r3, #34	; 0x22
 800617c:	f040 80ab 	bne.w	80062d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006188:	d117      	bne.n	80061ba <UART_Receive_IT+0x50>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d113      	bne.n	80061ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
 80061b8:	e026      	b.n	8006208 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061cc:	d007      	beq.n	80061de <UART_Receive_IT+0x74>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <UART_Receive_IT+0x82>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e008      	b.n	80061fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29b      	uxth	r3, r3
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4619      	mov	r1, r3
 8006216:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006218:	2b00      	cmp	r3, #0
 800621a:	d15a      	bne.n	80062d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0220 	bic.w	r2, r2, #32
 800622a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800623a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	2b01      	cmp	r3, #1
 800625a:	d135      	bne.n	80062c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	613b      	str	r3, [r7, #16]
   return(result);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f023 0310 	bic.w	r3, r3, #16
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	623a      	str	r2, [r7, #32]
 8006284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	69f9      	ldr	r1, [r7, #28]
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e5      	bne.n	8006262 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d10a      	bne.n	80062ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fdbb 	bl	8005e3c <HAL_UARTEx_RxEventCallback>
 80062c6:	e002      	b.n	80062ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fb f8eb 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e002      	b.n	80062d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e000      	b.n	80062d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
  }
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3730      	adds	r7, #48	; 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e4:	b0c0      	sub	sp, #256	; 0x100
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	ea40 0301 	orr.w	r3, r0, r1
 8006308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	431a      	orrs	r2, r3
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	431a      	orrs	r2, r3
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006338:	f021 010c 	bic.w	r1, r1, #12
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006346:	430b      	orrs	r3, r1
 8006348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635a:	6999      	ldr	r1, [r3, #24]
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	ea40 0301 	orr.w	r3, r0, r1
 8006366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b8f      	ldr	r3, [pc, #572]	; (80065ac <UART_SetConfig+0x2cc>)
 8006370:	429a      	cmp	r2, r3
 8006372:	d005      	beq.n	8006380 <UART_SetConfig+0xa0>
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b8d      	ldr	r3, [pc, #564]	; (80065b0 <UART_SetConfig+0x2d0>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d104      	bne.n	800638a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006380:	f7fe f926 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 8006384:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006388:	e003      	b.n	8006392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800638a:	f7fe f90d 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 800638e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639c:	f040 810c 	bne.w	80065b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	1891      	adds	r1, r2, r2
 80063b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80063ba:	415b      	adcs	r3, r3
 80063bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063c2:	4621      	mov	r1, r4
 80063c4:	eb12 0801 	adds.w	r8, r2, r1
 80063c8:	4629      	mov	r1, r5
 80063ca:	eb43 0901 	adc.w	r9, r3, r1
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063e2:	4690      	mov	r8, r2
 80063e4:	4699      	mov	r9, r3
 80063e6:	4623      	mov	r3, r4
 80063e8:	eb18 0303 	adds.w	r3, r8, r3
 80063ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063f0:	462b      	mov	r3, r5
 80063f2:	eb49 0303 	adc.w	r3, r9, r3
 80063f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006406:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800640a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800640e:	460b      	mov	r3, r1
 8006410:	18db      	adds	r3, r3, r3
 8006412:	653b      	str	r3, [r7, #80]	; 0x50
 8006414:	4613      	mov	r3, r2
 8006416:	eb42 0303 	adc.w	r3, r2, r3
 800641a:	657b      	str	r3, [r7, #84]	; 0x54
 800641c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006424:	f7f9 ff44 	bl	80002b0 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4b61      	ldr	r3, [pc, #388]	; (80065b4 <UART_SetConfig+0x2d4>)
 800642e:	fba3 2302 	umull	r2, r3, r3, r2
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	011c      	lsls	r4, r3, #4
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006440:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006450:	415b      	adcs	r3, r3
 8006452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006458:	4641      	mov	r1, r8
 800645a:	eb12 0a01 	adds.w	sl, r2, r1
 800645e:	4649      	mov	r1, r9
 8006460:	eb43 0b01 	adc.w	fp, r3, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006478:	4692      	mov	sl, r2
 800647a:	469b      	mov	fp, r3
 800647c:	4643      	mov	r3, r8
 800647e:	eb1a 0303 	adds.w	r3, sl, r3
 8006482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006486:	464b      	mov	r3, r9
 8006488:	eb4b 0303 	adc.w	r3, fp, r3
 800648c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800649c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064a4:	460b      	mov	r3, r1
 80064a6:	18db      	adds	r3, r3, r3
 80064a8:	643b      	str	r3, [r7, #64]	; 0x40
 80064aa:	4613      	mov	r3, r2
 80064ac:	eb42 0303 	adc.w	r3, r2, r3
 80064b0:	647b      	str	r3, [r7, #68]	; 0x44
 80064b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064ba:	f7f9 fef9 	bl	80002b0 <__aeabi_uldivmod>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4611      	mov	r1, r2
 80064c4:	4b3b      	ldr	r3, [pc, #236]	; (80065b4 <UART_SetConfig+0x2d4>)
 80064c6:	fba3 2301 	umull	r2, r3, r3, r1
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2264      	movs	r2, #100	; 0x64
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	1acb      	subs	r3, r1, r3
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064da:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <UART_SetConfig+0x2d4>)
 80064dc:	fba3 2302 	umull	r2, r3, r3, r2
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e8:	441c      	add	r4, r3
 80064ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	1891      	adds	r1, r2, r2
 8006502:	63b9      	str	r1, [r7, #56]	; 0x38
 8006504:	415b      	adcs	r3, r3
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800650c:	4641      	mov	r1, r8
 800650e:	1851      	adds	r1, r2, r1
 8006510:	6339      	str	r1, [r7, #48]	; 0x30
 8006512:	4649      	mov	r1, r9
 8006514:	414b      	adcs	r3, r1
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006524:	4659      	mov	r1, fp
 8006526:	00cb      	lsls	r3, r1, #3
 8006528:	4651      	mov	r1, sl
 800652a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652e:	4651      	mov	r1, sl
 8006530:	00ca      	lsls	r2, r1, #3
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	4603      	mov	r3, r0
 8006538:	4642      	mov	r2, r8
 800653a:	189b      	adds	r3, r3, r2
 800653c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006540:	464b      	mov	r3, r9
 8006542:	460a      	mov	r2, r1
 8006544:	eb42 0303 	adc.w	r3, r2, r3
 8006548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006558:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800655c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006560:	460b      	mov	r3, r1
 8006562:	18db      	adds	r3, r3, r3
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	4613      	mov	r3, r2
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006576:	f7f9 fe9b 	bl	80002b0 <__aeabi_uldivmod>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <UART_SetConfig+0x2d4>)
 8006580:	fba3 1302 	umull	r1, r3, r3, r2
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	2164      	movs	r1, #100	; 0x64
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	3332      	adds	r3, #50	; 0x32
 8006592:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <UART_SetConfig+0x2d4>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f003 0207 	and.w	r2, r3, #7
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4422      	add	r2, r4
 80065a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a8:	e105      	b.n	80067b6 <UART_SetConfig+0x4d6>
 80065aa:	bf00      	nop
 80065ac:	40011000 	.word	0x40011000
 80065b0:	40011400 	.word	0x40011400
 80065b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065ca:	4642      	mov	r2, r8
 80065cc:	464b      	mov	r3, r9
 80065ce:	1891      	adds	r1, r2, r2
 80065d0:	6239      	str	r1, [r7, #32]
 80065d2:	415b      	adcs	r3, r3
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
 80065d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065da:	4641      	mov	r1, r8
 80065dc:	1854      	adds	r4, r2, r1
 80065de:	4649      	mov	r1, r9
 80065e0:	eb43 0501 	adc.w	r5, r3, r1
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	00eb      	lsls	r3, r5, #3
 80065ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f2:	00e2      	lsls	r2, r4, #3
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	4643      	mov	r3, r8
 80065fa:	18e3      	adds	r3, r4, r3
 80065fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006600:	464b      	mov	r3, r9
 8006602:	eb45 0303 	adc.w	r3, r5, r3
 8006606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006626:	4629      	mov	r1, r5
 8006628:	008b      	lsls	r3, r1, #2
 800662a:	4621      	mov	r1, r4
 800662c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006630:	4621      	mov	r1, r4
 8006632:	008a      	lsls	r2, r1, #2
 8006634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006638:	f7f9 fe3a 	bl	80002b0 <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4b60      	ldr	r3, [pc, #384]	; (80067c4 <UART_SetConfig+0x4e4>)
 8006642:	fba3 2302 	umull	r2, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	011c      	lsls	r4, r3, #4
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006654:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	61b9      	str	r1, [r7, #24]
 8006664:	415b      	adcs	r3, r3
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6139      	str	r1, [r7, #16]
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066a0:	464b      	mov	r3, r9
 80066a2:	460a      	mov	r2, r1
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066c4:	4649      	mov	r1, r9
 80066c6:	008b      	lsls	r3, r1, #2
 80066c8:	4641      	mov	r1, r8
 80066ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ce:	4641      	mov	r1, r8
 80066d0:	008a      	lsls	r2, r1, #2
 80066d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066d6:	f7f9 fdeb 	bl	80002b0 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <UART_SetConfig+0x4e4>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	2164      	movs	r1, #100	; 0x64
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	3332      	adds	r3, #50	; 0x32
 80066f2:	4a34      	ldr	r2, [pc, #208]	; (80067c4 <UART_SetConfig+0x4e4>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066fe:	441c      	add	r4, r3
 8006700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006704:	2200      	movs	r2, #0
 8006706:	673b      	str	r3, [r7, #112]	; 0x70
 8006708:	677a      	str	r2, [r7, #116]	; 0x74
 800670a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800670e:	4642      	mov	r2, r8
 8006710:	464b      	mov	r3, r9
 8006712:	1891      	adds	r1, r2, r2
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	415b      	adcs	r3, r3
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800671e:	4641      	mov	r1, r8
 8006720:	1851      	adds	r1, r2, r1
 8006722:	6039      	str	r1, [r7, #0]
 8006724:	4649      	mov	r1, r9
 8006726:	414b      	adcs	r3, r1
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006736:	4659      	mov	r1, fp
 8006738:	00cb      	lsls	r3, r1, #3
 800673a:	4651      	mov	r1, sl
 800673c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006740:	4651      	mov	r1, sl
 8006742:	00ca      	lsls	r2, r1, #3
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	4603      	mov	r3, r0
 800674a:	4642      	mov	r2, r8
 800674c:	189b      	adds	r3, r3, r2
 800674e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006750:	464b      	mov	r3, r9
 8006752:	460a      	mov	r2, r1
 8006754:	eb42 0303 	adc.w	r3, r2, r3
 8006758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	663b      	str	r3, [r7, #96]	; 0x60
 8006764:	667a      	str	r2, [r7, #100]	; 0x64
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006772:	4649      	mov	r1, r9
 8006774:	008b      	lsls	r3, r1, #2
 8006776:	4641      	mov	r1, r8
 8006778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800677c:	4641      	mov	r1, r8
 800677e:	008a      	lsls	r2, r1, #2
 8006780:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006784:	f7f9 fd94 	bl	80002b0 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <UART_SetConfig+0x4e4>)
 800678e:	fba3 1302 	umull	r1, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	2164      	movs	r1, #100	; 0x64
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	3332      	adds	r3, #50	; 0x32
 80067a0:	4a08      	ldr	r2, [pc, #32]	; (80067c4 <UART_SetConfig+0x4e4>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	f003 020f 	and.w	r2, r3, #15
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4422      	add	r2, r4
 80067b4:	609a      	str	r2, [r3, #8]
}
 80067b6:	bf00      	nop
 80067b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067bc:	46bd      	mov	sp, r7
 80067be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c2:	bf00      	nop
 80067c4:	51eb851f 	.word	0x51eb851f

080067c8 <_ZdaPv>:
 80067c8:	f000 b802 	b.w	80067d0 <_ZdlPv>

080067cc <_Znaj>:
 80067cc:	f000 b802 	b.w	80067d4 <_Znwj>

080067d0 <_ZdlPv>:
 80067d0:	f000 b854 	b.w	800687c <free>

080067d4 <_Znwj>:
 80067d4:	2801      	cmp	r0, #1
 80067d6:	bf38      	it	cc
 80067d8:	2001      	movcc	r0, #1
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 f844 	bl	800686c <malloc>
 80067e4:	b930      	cbnz	r0, 80067f4 <_Znwj+0x20>
 80067e6:	f000 f807 	bl	80067f8 <_ZSt15get_new_handlerv>
 80067ea:	b908      	cbnz	r0, 80067f0 <_Znwj+0x1c>
 80067ec:	f000 f80c 	bl	8006808 <abort>
 80067f0:	4780      	blx	r0
 80067f2:	e7f4      	b.n	80067de <_Znwj+0xa>
 80067f4:	bd10      	pop	{r4, pc}
	...

080067f8 <_ZSt15get_new_handlerv>:
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <_ZSt15get_new_handlerv+0xc>)
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	f3bf 8f5b 	dmb	ish
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	200003f0 	.word	0x200003f0

08006808 <abort>:
 8006808:	b508      	push	{r3, lr}
 800680a:	2006      	movs	r0, #6
 800680c:	f000 f95e 	bl	8006acc <raise>
 8006810:	2001      	movs	r0, #1
 8006812:	f7fb fc21 	bl	8002058 <_exit>
	...

08006818 <__errno>:
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <__errno+0x8>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000040 	.word	0x20000040

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4d0d      	ldr	r5, [pc, #52]	; (800685c <__libc_init_array+0x38>)
 8006828:	4c0d      	ldr	r4, [pc, #52]	; (8006860 <__libc_init_array+0x3c>)
 800682a:	1b64      	subs	r4, r4, r5
 800682c:	10a4      	asrs	r4, r4, #2
 800682e:	2600      	movs	r6, #0
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	4d0b      	ldr	r5, [pc, #44]	; (8006864 <__libc_init_array+0x40>)
 8006836:	4c0c      	ldr	r4, [pc, #48]	; (8006868 <__libc_init_array+0x44>)
 8006838:	f000 fcea 	bl	8007210 <_init>
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	2600      	movs	r6, #0
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f855 3b04 	ldr.w	r3, [r5], #4
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	f855 3b04 	ldr.w	r3, [r5], #4
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	080073b8 	.word	0x080073b8
 8006860:	080073b8 	.word	0x080073b8
 8006864:	080073b8 	.word	0x080073b8
 8006868:	080073c0 	.word	0x080073c0

0800686c <malloc>:
 800686c:	4b02      	ldr	r3, [pc, #8]	; (8006878 <malloc+0xc>)
 800686e:	4601      	mov	r1, r0
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f000 b87f 	b.w	8006974 <_malloc_r>
 8006876:	bf00      	nop
 8006878:	20000040 	.word	0x20000040

0800687c <free>:
 800687c:	4b02      	ldr	r3, [pc, #8]	; (8006888 <free+0xc>)
 800687e:	4601      	mov	r1, r0
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	f000 b80b 	b.w	800689c <_free_r>
 8006886:	bf00      	nop
 8006888:	20000040 	.word	0x20000040

0800688c <memset>:
 800688c:	4402      	add	r2, r0
 800688e:	4603      	mov	r3, r0
 8006890:	4293      	cmp	r3, r2
 8006892:	d100      	bne.n	8006896 <memset+0xa>
 8006894:	4770      	bx	lr
 8006896:	f803 1b01 	strb.w	r1, [r3], #1
 800689a:	e7f9      	b.n	8006890 <memset+0x4>

0800689c <_free_r>:
 800689c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800689e:	2900      	cmp	r1, #0
 80068a0:	d044      	beq.n	800692c <_free_r+0x90>
 80068a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a6:	9001      	str	r0, [sp, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f1a1 0404 	sub.w	r4, r1, #4
 80068ae:	bfb8      	it	lt
 80068b0:	18e4      	addlt	r4, r4, r3
 80068b2:	f000 f94f 	bl	8006b54 <__malloc_lock>
 80068b6:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <_free_r+0x94>)
 80068b8:	9801      	ldr	r0, [sp, #4]
 80068ba:	6813      	ldr	r3, [r2, #0]
 80068bc:	b933      	cbnz	r3, 80068cc <_free_r+0x30>
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	6014      	str	r4, [r2, #0]
 80068c2:	b003      	add	sp, #12
 80068c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068c8:	f000 b94a 	b.w	8006b60 <__malloc_unlock>
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	d908      	bls.n	80068e2 <_free_r+0x46>
 80068d0:	6825      	ldr	r5, [r4, #0]
 80068d2:	1961      	adds	r1, r4, r5
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf01      	itttt	eq
 80068d8:	6819      	ldreq	r1, [r3, #0]
 80068da:	685b      	ldreq	r3, [r3, #4]
 80068dc:	1949      	addeq	r1, r1, r5
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	e7ed      	b.n	80068be <_free_r+0x22>
 80068e2:	461a      	mov	r2, r3
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	b10b      	cbz	r3, 80068ec <_free_r+0x50>
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	d9fa      	bls.n	80068e2 <_free_r+0x46>
 80068ec:	6811      	ldr	r1, [r2, #0]
 80068ee:	1855      	adds	r5, r2, r1
 80068f0:	42a5      	cmp	r5, r4
 80068f2:	d10b      	bne.n	800690c <_free_r+0x70>
 80068f4:	6824      	ldr	r4, [r4, #0]
 80068f6:	4421      	add	r1, r4
 80068f8:	1854      	adds	r4, r2, r1
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	d1e0      	bne.n	80068c2 <_free_r+0x26>
 8006900:	681c      	ldr	r4, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	6053      	str	r3, [r2, #4]
 8006906:	4421      	add	r1, r4
 8006908:	6011      	str	r1, [r2, #0]
 800690a:	e7da      	b.n	80068c2 <_free_r+0x26>
 800690c:	d902      	bls.n	8006914 <_free_r+0x78>
 800690e:	230c      	movs	r3, #12
 8006910:	6003      	str	r3, [r0, #0]
 8006912:	e7d6      	b.n	80068c2 <_free_r+0x26>
 8006914:	6825      	ldr	r5, [r4, #0]
 8006916:	1961      	adds	r1, r4, r5
 8006918:	428b      	cmp	r3, r1
 800691a:	bf04      	itt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	6063      	str	r3, [r4, #4]
 8006922:	bf04      	itt	eq
 8006924:	1949      	addeq	r1, r1, r5
 8006926:	6021      	streq	r1, [r4, #0]
 8006928:	6054      	str	r4, [r2, #4]
 800692a:	e7ca      	b.n	80068c2 <_free_r+0x26>
 800692c:	b003      	add	sp, #12
 800692e:	bd30      	pop	{r4, r5, pc}
 8006930:	200003f4 	.word	0x200003f4

08006934 <sbrk_aligned>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4e0e      	ldr	r6, [pc, #56]	; (8006970 <sbrk_aligned+0x3c>)
 8006938:	460c      	mov	r4, r1
 800693a:	6831      	ldr	r1, [r6, #0]
 800693c:	4605      	mov	r5, r0
 800693e:	b911      	cbnz	r1, 8006946 <sbrk_aligned+0x12>
 8006940:	f000 f88c 	bl	8006a5c <_sbrk_r>
 8006944:	6030      	str	r0, [r6, #0]
 8006946:	4621      	mov	r1, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f000 f887 	bl	8006a5c <_sbrk_r>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d00a      	beq.n	8006968 <sbrk_aligned+0x34>
 8006952:	1cc4      	adds	r4, r0, #3
 8006954:	f024 0403 	bic.w	r4, r4, #3
 8006958:	42a0      	cmp	r0, r4
 800695a:	d007      	beq.n	800696c <sbrk_aligned+0x38>
 800695c:	1a21      	subs	r1, r4, r0
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f87c 	bl	8006a5c <_sbrk_r>
 8006964:	3001      	adds	r0, #1
 8006966:	d101      	bne.n	800696c <sbrk_aligned+0x38>
 8006968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800696c:	4620      	mov	r0, r4
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	200003f8 	.word	0x200003f8

08006974 <_malloc_r>:
 8006974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006978:	1ccd      	adds	r5, r1, #3
 800697a:	f025 0503 	bic.w	r5, r5, #3
 800697e:	3508      	adds	r5, #8
 8006980:	2d0c      	cmp	r5, #12
 8006982:	bf38      	it	cc
 8006984:	250c      	movcc	r5, #12
 8006986:	2d00      	cmp	r5, #0
 8006988:	4607      	mov	r7, r0
 800698a:	db01      	blt.n	8006990 <_malloc_r+0x1c>
 800698c:	42a9      	cmp	r1, r5
 800698e:	d905      	bls.n	800699c <_malloc_r+0x28>
 8006990:	230c      	movs	r3, #12
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	2600      	movs	r6, #0
 8006996:	4630      	mov	r0, r6
 8006998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699c:	4e2e      	ldr	r6, [pc, #184]	; (8006a58 <_malloc_r+0xe4>)
 800699e:	f000 f8d9 	bl	8006b54 <__malloc_lock>
 80069a2:	6833      	ldr	r3, [r6, #0]
 80069a4:	461c      	mov	r4, r3
 80069a6:	bb34      	cbnz	r4, 80069f6 <_malloc_r+0x82>
 80069a8:	4629      	mov	r1, r5
 80069aa:	4638      	mov	r0, r7
 80069ac:	f7ff ffc2 	bl	8006934 <sbrk_aligned>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	4604      	mov	r4, r0
 80069b4:	d14d      	bne.n	8006a52 <_malloc_r+0xde>
 80069b6:	6834      	ldr	r4, [r6, #0]
 80069b8:	4626      	mov	r6, r4
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d140      	bne.n	8006a40 <_malloc_r+0xcc>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	4631      	mov	r1, r6
 80069c2:	4638      	mov	r0, r7
 80069c4:	eb04 0803 	add.w	r8, r4, r3
 80069c8:	f000 f848 	bl	8006a5c <_sbrk_r>
 80069cc:	4580      	cmp	r8, r0
 80069ce:	d13a      	bne.n	8006a46 <_malloc_r+0xd2>
 80069d0:	6821      	ldr	r1, [r4, #0]
 80069d2:	3503      	adds	r5, #3
 80069d4:	1a6d      	subs	r5, r5, r1
 80069d6:	f025 0503 	bic.w	r5, r5, #3
 80069da:	3508      	adds	r5, #8
 80069dc:	2d0c      	cmp	r5, #12
 80069de:	bf38      	it	cc
 80069e0:	250c      	movcc	r5, #12
 80069e2:	4629      	mov	r1, r5
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7ff ffa5 	bl	8006934 <sbrk_aligned>
 80069ea:	3001      	adds	r0, #1
 80069ec:	d02b      	beq.n	8006a46 <_malloc_r+0xd2>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	442b      	add	r3, r5
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	e00e      	b.n	8006a14 <_malloc_r+0xa0>
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	1b52      	subs	r2, r2, r5
 80069fa:	d41e      	bmi.n	8006a3a <_malloc_r+0xc6>
 80069fc:	2a0b      	cmp	r2, #11
 80069fe:	d916      	bls.n	8006a2e <_malloc_r+0xba>
 8006a00:	1961      	adds	r1, r4, r5
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	6025      	str	r5, [r4, #0]
 8006a06:	bf18      	it	ne
 8006a08:	6059      	strne	r1, [r3, #4]
 8006a0a:	6863      	ldr	r3, [r4, #4]
 8006a0c:	bf08      	it	eq
 8006a0e:	6031      	streq	r1, [r6, #0]
 8006a10:	5162      	str	r2, [r4, r5]
 8006a12:	604b      	str	r3, [r1, #4]
 8006a14:	4638      	mov	r0, r7
 8006a16:	f104 060b 	add.w	r6, r4, #11
 8006a1a:	f000 f8a1 	bl	8006b60 <__malloc_unlock>
 8006a1e:	f026 0607 	bic.w	r6, r6, #7
 8006a22:	1d23      	adds	r3, r4, #4
 8006a24:	1af2      	subs	r2, r6, r3
 8006a26:	d0b6      	beq.n	8006996 <_malloc_r+0x22>
 8006a28:	1b9b      	subs	r3, r3, r6
 8006a2a:	50a3      	str	r3, [r4, r2]
 8006a2c:	e7b3      	b.n	8006996 <_malloc_r+0x22>
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	bf0c      	ite	eq
 8006a34:	6032      	streq	r2, [r6, #0]
 8006a36:	605a      	strne	r2, [r3, #4]
 8006a38:	e7ec      	b.n	8006a14 <_malloc_r+0xa0>
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	6864      	ldr	r4, [r4, #4]
 8006a3e:	e7b2      	b.n	80069a6 <_malloc_r+0x32>
 8006a40:	4634      	mov	r4, r6
 8006a42:	6876      	ldr	r6, [r6, #4]
 8006a44:	e7b9      	b.n	80069ba <_malloc_r+0x46>
 8006a46:	230c      	movs	r3, #12
 8006a48:	603b      	str	r3, [r7, #0]
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f000 f888 	bl	8006b60 <__malloc_unlock>
 8006a50:	e7a1      	b.n	8006996 <_malloc_r+0x22>
 8006a52:	6025      	str	r5, [r4, #0]
 8006a54:	e7de      	b.n	8006a14 <_malloc_r+0xa0>
 8006a56:	bf00      	nop
 8006a58:	200003f4 	.word	0x200003f4

08006a5c <_sbrk_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d06      	ldr	r5, [pc, #24]	; (8006a78 <_sbrk_r+0x1c>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	4604      	mov	r4, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	602b      	str	r3, [r5, #0]
 8006a68:	f7fb fb00 	bl	800206c <_sbrk>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_sbrk_r+0x1a>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_sbrk_r+0x1a>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	200003fc 	.word	0x200003fc

08006a7c <_raise_r>:
 8006a7c:	291f      	cmp	r1, #31
 8006a7e:	b538      	push	{r3, r4, r5, lr}
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	d904      	bls.n	8006a90 <_raise_r+0x14>
 8006a86:	2316      	movs	r3, #22
 8006a88:	6003      	str	r3, [r0, #0]
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a92:	b112      	cbz	r2, 8006a9a <_raise_r+0x1e>
 8006a94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a98:	b94b      	cbnz	r3, 8006aae <_raise_r+0x32>
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 f830 	bl	8006b00 <_getpid_r>
 8006aa0:	462a      	mov	r2, r5
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aaa:	f000 b817 	b.w	8006adc <_kill_r>
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d00a      	beq.n	8006ac8 <_raise_r+0x4c>
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	d103      	bne.n	8006abe <_raise_r+0x42>
 8006ab6:	2316      	movs	r3, #22
 8006ab8:	6003      	str	r3, [r0, #0]
 8006aba:	2001      	movs	r0, #1
 8006abc:	e7e7      	b.n	8006a8e <_raise_r+0x12>
 8006abe:	2400      	movs	r4, #0
 8006ac0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	4798      	blx	r3
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7e0      	b.n	8006a8e <_raise_r+0x12>

08006acc <raise>:
 8006acc:	4b02      	ldr	r3, [pc, #8]	; (8006ad8 <raise+0xc>)
 8006ace:	4601      	mov	r1, r0
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	f7ff bfd3 	b.w	8006a7c <_raise_r>
 8006ad6:	bf00      	nop
 8006ad8:	20000040 	.word	0x20000040

08006adc <_kill_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d07      	ldr	r5, [pc, #28]	; (8006afc <_kill_r+0x20>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	602b      	str	r3, [r5, #0]
 8006aea:	f7fb faa5 	bl	8002038 <_kill>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d102      	bne.n	8006af8 <_kill_r+0x1c>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	b103      	cbz	r3, 8006af8 <_kill_r+0x1c>
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	200003fc 	.word	0x200003fc

08006b00 <_getpid_r>:
 8006b00:	f7fb ba92 	b.w	8002028 <_getpid>

08006b04 <siprintf>:
 8006b04:	b40e      	push	{r1, r2, r3}
 8006b06:	b500      	push	{lr}
 8006b08:	b09c      	sub	sp, #112	; 0x70
 8006b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	9006      	str	r0, [sp, #24]
 8006b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b14:	4809      	ldr	r0, [pc, #36]	; (8006b3c <siprintf+0x38>)
 8006b16:	9107      	str	r1, [sp, #28]
 8006b18:	9104      	str	r1, [sp, #16]
 8006b1a:	4909      	ldr	r1, [pc, #36]	; (8006b40 <siprintf+0x3c>)
 8006b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b20:	9105      	str	r1, [sp, #20]
 8006b22:	6800      	ldr	r0, [r0, #0]
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	a902      	add	r1, sp, #8
 8006b28:	f000 f87c 	bl	8006c24 <_svfiprintf_r>
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	b01c      	add	sp, #112	; 0x70
 8006b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b38:	b003      	add	sp, #12
 8006b3a:	4770      	bx	lr
 8006b3c:	20000040 	.word	0x20000040
 8006b40:	ffff0208 	.word	0xffff0208

08006b44 <strcpy>:
 8006b44:	4603      	mov	r3, r0
 8006b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b4a:	f803 2b01 	strb.w	r2, [r3], #1
 8006b4e:	2a00      	cmp	r2, #0
 8006b50:	d1f9      	bne.n	8006b46 <strcpy+0x2>
 8006b52:	4770      	bx	lr

08006b54 <__malloc_lock>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__malloc_lock+0x8>)
 8006b56:	f000 baf9 	b.w	800714c <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	20000400 	.word	0x20000400

08006b60 <__malloc_unlock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__malloc_unlock+0x8>)
 8006b62:	f000 baf4 	b.w	800714e <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	20000400 	.word	0x20000400

08006b6c <__ssputs_r>:
 8006b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b70:	688e      	ldr	r6, [r1, #8]
 8006b72:	429e      	cmp	r6, r3
 8006b74:	4682      	mov	sl, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	4690      	mov	r8, r2
 8006b7a:	461f      	mov	r7, r3
 8006b7c:	d838      	bhi.n	8006bf0 <__ssputs_r+0x84>
 8006b7e:	898a      	ldrh	r2, [r1, #12]
 8006b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b84:	d032      	beq.n	8006bec <__ssputs_r+0x80>
 8006b86:	6825      	ldr	r5, [r4, #0]
 8006b88:	6909      	ldr	r1, [r1, #16]
 8006b8a:	eba5 0901 	sub.w	r9, r5, r1
 8006b8e:	6965      	ldr	r5, [r4, #20]
 8006b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b98:	3301      	adds	r3, #1
 8006b9a:	444b      	add	r3, r9
 8006b9c:	106d      	asrs	r5, r5, #1
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	bf38      	it	cc
 8006ba2:	461d      	movcc	r5, r3
 8006ba4:	0553      	lsls	r3, r2, #21
 8006ba6:	d531      	bpl.n	8006c0c <__ssputs_r+0xa0>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7ff fee3 	bl	8006974 <_malloc_r>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	b950      	cbnz	r0, 8006bc8 <__ssputs_r+0x5c>
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	f8ca 3000 	str.w	r3, [sl]
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	6921      	ldr	r1, [r4, #16]
 8006bca:	464a      	mov	r2, r9
 8006bcc:	f000 fac0 	bl	8007150 <memcpy>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	6126      	str	r6, [r4, #16]
 8006bde:	6165      	str	r5, [r4, #20]
 8006be0:	444e      	add	r6, r9
 8006be2:	eba5 0509 	sub.w	r5, r5, r9
 8006be6:	6026      	str	r6, [r4, #0]
 8006be8:	60a5      	str	r5, [r4, #8]
 8006bea:	463e      	mov	r6, r7
 8006bec:	42be      	cmp	r6, r7
 8006bee:	d900      	bls.n	8006bf2 <__ssputs_r+0x86>
 8006bf0:	463e      	mov	r6, r7
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	f000 fab8 	bl	800716c <memmove>
 8006bfc:	68a3      	ldr	r3, [r4, #8]
 8006bfe:	1b9b      	subs	r3, r3, r6
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	4433      	add	r3, r6
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e7db      	b.n	8006bc4 <__ssputs_r+0x58>
 8006c0c:	462a      	mov	r2, r5
 8006c0e:	f000 fac7 	bl	80071a0 <_realloc_r>
 8006c12:	4606      	mov	r6, r0
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d1e1      	bne.n	8006bdc <__ssputs_r+0x70>
 8006c18:	6921      	ldr	r1, [r4, #16]
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	f7ff fe3e 	bl	800689c <_free_r>
 8006c20:	e7c7      	b.n	8006bb2 <__ssputs_r+0x46>
	...

08006c24 <_svfiprintf_r>:
 8006c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	4698      	mov	r8, r3
 8006c2a:	898b      	ldrh	r3, [r1, #12]
 8006c2c:	061b      	lsls	r3, r3, #24
 8006c2e:	b09d      	sub	sp, #116	; 0x74
 8006c30:	4607      	mov	r7, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	d50e      	bpl.n	8006c56 <_svfiprintf_r+0x32>
 8006c38:	690b      	ldr	r3, [r1, #16]
 8006c3a:	b963      	cbnz	r3, 8006c56 <_svfiprintf_r+0x32>
 8006c3c:	2140      	movs	r1, #64	; 0x40
 8006c3e:	f7ff fe99 	bl	8006974 <_malloc_r>
 8006c42:	6028      	str	r0, [r5, #0]
 8006c44:	6128      	str	r0, [r5, #16]
 8006c46:	b920      	cbnz	r0, 8006c52 <_svfiprintf_r+0x2e>
 8006c48:	230c      	movs	r3, #12
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c50:	e0d1      	b.n	8006df6 <_svfiprintf_r+0x1d2>
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	616b      	str	r3, [r5, #20]
 8006c56:	2300      	movs	r3, #0
 8006c58:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5a:	2320      	movs	r3, #32
 8006c5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c64:	2330      	movs	r3, #48	; 0x30
 8006c66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e10 <_svfiprintf_r+0x1ec>
 8006c6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c6e:	f04f 0901 	mov.w	r9, #1
 8006c72:	4623      	mov	r3, r4
 8006c74:	469a      	mov	sl, r3
 8006c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c7a:	b10a      	cbz	r2, 8006c80 <_svfiprintf_r+0x5c>
 8006c7c:	2a25      	cmp	r2, #37	; 0x25
 8006c7e:	d1f9      	bne.n	8006c74 <_svfiprintf_r+0x50>
 8006c80:	ebba 0b04 	subs.w	fp, sl, r4
 8006c84:	d00b      	beq.n	8006c9e <_svfiprintf_r+0x7a>
 8006c86:	465b      	mov	r3, fp
 8006c88:	4622      	mov	r2, r4
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f7ff ff6d 	bl	8006b6c <__ssputs_r>
 8006c92:	3001      	adds	r0, #1
 8006c94:	f000 80aa 	beq.w	8006dec <_svfiprintf_r+0x1c8>
 8006c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c9a:	445a      	add	r2, fp
 8006c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80a2 	beq.w	8006dec <_svfiprintf_r+0x1c8>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb2:	f10a 0a01 	add.w	sl, sl, #1
 8006cb6:	9304      	str	r3, [sp, #16]
 8006cb8:	9307      	str	r3, [sp, #28]
 8006cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc0:	4654      	mov	r4, sl
 8006cc2:	2205      	movs	r2, #5
 8006cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc8:	4851      	ldr	r0, [pc, #324]	; (8006e10 <_svfiprintf_r+0x1ec>)
 8006cca:	f7f9 faa1 	bl	8000210 <memchr>
 8006cce:	9a04      	ldr	r2, [sp, #16]
 8006cd0:	b9d8      	cbnz	r0, 8006d0a <_svfiprintf_r+0xe6>
 8006cd2:	06d0      	lsls	r0, r2, #27
 8006cd4:	bf44      	itt	mi
 8006cd6:	2320      	movmi	r3, #32
 8006cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cdc:	0711      	lsls	r1, r2, #28
 8006cde:	bf44      	itt	mi
 8006ce0:	232b      	movmi	r3, #43	; 0x2b
 8006ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cea:	2b2a      	cmp	r3, #42	; 0x2a
 8006cec:	d015      	beq.n	8006d1a <_svfiprintf_r+0xf6>
 8006cee:	9a07      	ldr	r2, [sp, #28]
 8006cf0:	4654      	mov	r4, sl
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	f04f 0c0a 	mov.w	ip, #10
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cfe:	3b30      	subs	r3, #48	; 0x30
 8006d00:	2b09      	cmp	r3, #9
 8006d02:	d94e      	bls.n	8006da2 <_svfiprintf_r+0x17e>
 8006d04:	b1b0      	cbz	r0, 8006d34 <_svfiprintf_r+0x110>
 8006d06:	9207      	str	r2, [sp, #28]
 8006d08:	e014      	b.n	8006d34 <_svfiprintf_r+0x110>
 8006d0a:	eba0 0308 	sub.w	r3, r0, r8
 8006d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d12:	4313      	orrs	r3, r2
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	46a2      	mov	sl, r4
 8006d18:	e7d2      	b.n	8006cc0 <_svfiprintf_r+0x9c>
 8006d1a:	9b03      	ldr	r3, [sp, #12]
 8006d1c:	1d19      	adds	r1, r3, #4
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	9103      	str	r1, [sp, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bfbb      	ittet	lt
 8006d26:	425b      	neglt	r3, r3
 8006d28:	f042 0202 	orrlt.w	r2, r2, #2
 8006d2c:	9307      	strge	r3, [sp, #28]
 8006d2e:	9307      	strlt	r3, [sp, #28]
 8006d30:	bfb8      	it	lt
 8006d32:	9204      	strlt	r2, [sp, #16]
 8006d34:	7823      	ldrb	r3, [r4, #0]
 8006d36:	2b2e      	cmp	r3, #46	; 0x2e
 8006d38:	d10c      	bne.n	8006d54 <_svfiprintf_r+0x130>
 8006d3a:	7863      	ldrb	r3, [r4, #1]
 8006d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d3e:	d135      	bne.n	8006dac <_svfiprintf_r+0x188>
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	1d1a      	adds	r2, r3, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	9203      	str	r2, [sp, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bfb8      	it	lt
 8006d4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d50:	3402      	adds	r4, #2
 8006d52:	9305      	str	r3, [sp, #20]
 8006d54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e20 <_svfiprintf_r+0x1fc>
 8006d58:	7821      	ldrb	r1, [r4, #0]
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	f7f9 fa57 	bl	8000210 <memchr>
 8006d62:	b140      	cbz	r0, 8006d76 <_svfiprintf_r+0x152>
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	eba0 000a 	sub.w	r0, r0, sl
 8006d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	4303      	orrs	r3, r0
 8006d72:	3401      	adds	r4, #1
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7a:	4826      	ldr	r0, [pc, #152]	; (8006e14 <_svfiprintf_r+0x1f0>)
 8006d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d80:	2206      	movs	r2, #6
 8006d82:	f7f9 fa45 	bl	8000210 <memchr>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d038      	beq.n	8006dfc <_svfiprintf_r+0x1d8>
 8006d8a:	4b23      	ldr	r3, [pc, #140]	; (8006e18 <_svfiprintf_r+0x1f4>)
 8006d8c:	bb1b      	cbnz	r3, 8006dd6 <_svfiprintf_r+0x1b2>
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	3307      	adds	r3, #7
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	3308      	adds	r3, #8
 8006d98:	9303      	str	r3, [sp, #12]
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	4433      	add	r3, r6
 8006d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006da0:	e767      	b.n	8006c72 <_svfiprintf_r+0x4e>
 8006da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006da6:	460c      	mov	r4, r1
 8006da8:	2001      	movs	r0, #1
 8006daa:	e7a5      	b.n	8006cf8 <_svfiprintf_r+0xd4>
 8006dac:	2300      	movs	r3, #0
 8006dae:	3401      	adds	r4, #1
 8006db0:	9305      	str	r3, [sp, #20]
 8006db2:	4619      	mov	r1, r3
 8006db4:	f04f 0c0a 	mov.w	ip, #10
 8006db8:	4620      	mov	r0, r4
 8006dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dbe:	3a30      	subs	r2, #48	; 0x30
 8006dc0:	2a09      	cmp	r2, #9
 8006dc2:	d903      	bls.n	8006dcc <_svfiprintf_r+0x1a8>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0c5      	beq.n	8006d54 <_svfiprintf_r+0x130>
 8006dc8:	9105      	str	r1, [sp, #20]
 8006dca:	e7c3      	b.n	8006d54 <_svfiprintf_r+0x130>
 8006dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e7f0      	b.n	8006db8 <_svfiprintf_r+0x194>
 8006dd6:	ab03      	add	r3, sp, #12
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	462a      	mov	r2, r5
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <_svfiprintf_r+0x1f8>)
 8006dde:	a904      	add	r1, sp, #16
 8006de0:	4638      	mov	r0, r7
 8006de2:	f3af 8000 	nop.w
 8006de6:	1c42      	adds	r2, r0, #1
 8006de8:	4606      	mov	r6, r0
 8006dea:	d1d6      	bne.n	8006d9a <_svfiprintf_r+0x176>
 8006dec:	89ab      	ldrh	r3, [r5, #12]
 8006dee:	065b      	lsls	r3, r3, #25
 8006df0:	f53f af2c 	bmi.w	8006c4c <_svfiprintf_r+0x28>
 8006df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df6:	b01d      	add	sp, #116	; 0x74
 8006df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfc:	ab03      	add	r3, sp, #12
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	462a      	mov	r2, r5
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <_svfiprintf_r+0x1f8>)
 8006e04:	a904      	add	r1, sp, #16
 8006e06:	4638      	mov	r0, r7
 8006e08:	f000 f87a 	bl	8006f00 <_printf_i>
 8006e0c:	e7eb      	b.n	8006de6 <_svfiprintf_r+0x1c2>
 8006e0e:	bf00      	nop
 8006e10:	0800737c 	.word	0x0800737c
 8006e14:	08007386 	.word	0x08007386
 8006e18:	00000000 	.word	0x00000000
 8006e1c:	08006b6d 	.word	0x08006b6d
 8006e20:	08007382 	.word	0x08007382

08006e24 <_printf_common>:
 8006e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	4616      	mov	r6, r2
 8006e2a:	4699      	mov	r9, r3
 8006e2c:	688a      	ldr	r2, [r1, #8]
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e34:	4293      	cmp	r3, r2
 8006e36:	bfb8      	it	lt
 8006e38:	4613      	movlt	r3, r2
 8006e3a:	6033      	str	r3, [r6, #0]
 8006e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e40:	4607      	mov	r7, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	b10a      	cbz	r2, 8006e4a <_printf_common+0x26>
 8006e46:	3301      	adds	r3, #1
 8006e48:	6033      	str	r3, [r6, #0]
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	0699      	lsls	r1, r3, #26
 8006e4e:	bf42      	ittt	mi
 8006e50:	6833      	ldrmi	r3, [r6, #0]
 8006e52:	3302      	addmi	r3, #2
 8006e54:	6033      	strmi	r3, [r6, #0]
 8006e56:	6825      	ldr	r5, [r4, #0]
 8006e58:	f015 0506 	ands.w	r5, r5, #6
 8006e5c:	d106      	bne.n	8006e6c <_printf_common+0x48>
 8006e5e:	f104 0a19 	add.w	sl, r4, #25
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	6832      	ldr	r2, [r6, #0]
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dc26      	bgt.n	8006eba <_printf_common+0x96>
 8006e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e70:	1e13      	subs	r3, r2, #0
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	bf18      	it	ne
 8006e76:	2301      	movne	r3, #1
 8006e78:	0692      	lsls	r2, r2, #26
 8006e7a:	d42b      	bmi.n	8006ed4 <_printf_common+0xb0>
 8006e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e80:	4649      	mov	r1, r9
 8006e82:	4638      	mov	r0, r7
 8006e84:	47c0      	blx	r8
 8006e86:	3001      	adds	r0, #1
 8006e88:	d01e      	beq.n	8006ec8 <_printf_common+0xa4>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	68e5      	ldr	r5, [r4, #12]
 8006e8e:	6832      	ldr	r2, [r6, #0]
 8006e90:	f003 0306 	and.w	r3, r3, #6
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	bf08      	it	eq
 8006e98:	1aad      	subeq	r5, r5, r2
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	6922      	ldr	r2, [r4, #16]
 8006e9e:	bf0c      	ite	eq
 8006ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ea4:	2500      	movne	r5, #0
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	bfc4      	itt	gt
 8006eaa:	1a9b      	subgt	r3, r3, r2
 8006eac:	18ed      	addgt	r5, r5, r3
 8006eae:	2600      	movs	r6, #0
 8006eb0:	341a      	adds	r4, #26
 8006eb2:	42b5      	cmp	r5, r6
 8006eb4:	d11a      	bne.n	8006eec <_printf_common+0xc8>
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e008      	b.n	8006ecc <_printf_common+0xa8>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	47c0      	blx	r8
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d103      	bne.n	8006ed0 <_printf_common+0xac>
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	e7c6      	b.n	8006e62 <_printf_common+0x3e>
 8006ed4:	18e1      	adds	r1, r4, r3
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	2030      	movs	r0, #48	; 0x30
 8006eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ede:	4422      	add	r2, r4
 8006ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ee8:	3302      	adds	r3, #2
 8006eea:	e7c7      	b.n	8006e7c <_printf_common+0x58>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4622      	mov	r2, r4
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c0      	blx	r8
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d0e6      	beq.n	8006ec8 <_printf_common+0xa4>
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7d9      	b.n	8006eb2 <_printf_common+0x8e>
	...

08006f00 <_printf_i>:
 8006f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	7e0f      	ldrb	r7, [r1, #24]
 8006f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f08:	2f78      	cmp	r7, #120	; 0x78
 8006f0a:	4691      	mov	r9, r2
 8006f0c:	4680      	mov	r8, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	469a      	mov	sl, r3
 8006f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f16:	d807      	bhi.n	8006f28 <_printf_i+0x28>
 8006f18:	2f62      	cmp	r7, #98	; 0x62
 8006f1a:	d80a      	bhi.n	8006f32 <_printf_i+0x32>
 8006f1c:	2f00      	cmp	r7, #0
 8006f1e:	f000 80d8 	beq.w	80070d2 <_printf_i+0x1d2>
 8006f22:	2f58      	cmp	r7, #88	; 0x58
 8006f24:	f000 80a3 	beq.w	800706e <_printf_i+0x16e>
 8006f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f30:	e03a      	b.n	8006fa8 <_printf_i+0xa8>
 8006f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f36:	2b15      	cmp	r3, #21
 8006f38:	d8f6      	bhi.n	8006f28 <_printf_i+0x28>
 8006f3a:	a101      	add	r1, pc, #4	; (adr r1, 8006f40 <_printf_i+0x40>)
 8006f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f40:	08006f99 	.word	0x08006f99
 8006f44:	08006fad 	.word	0x08006fad
 8006f48:	08006f29 	.word	0x08006f29
 8006f4c:	08006f29 	.word	0x08006f29
 8006f50:	08006f29 	.word	0x08006f29
 8006f54:	08006f29 	.word	0x08006f29
 8006f58:	08006fad 	.word	0x08006fad
 8006f5c:	08006f29 	.word	0x08006f29
 8006f60:	08006f29 	.word	0x08006f29
 8006f64:	08006f29 	.word	0x08006f29
 8006f68:	08006f29 	.word	0x08006f29
 8006f6c:	080070b9 	.word	0x080070b9
 8006f70:	08006fdd 	.word	0x08006fdd
 8006f74:	0800709b 	.word	0x0800709b
 8006f78:	08006f29 	.word	0x08006f29
 8006f7c:	08006f29 	.word	0x08006f29
 8006f80:	080070db 	.word	0x080070db
 8006f84:	08006f29 	.word	0x08006f29
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006f29 	.word	0x08006f29
 8006f90:	08006f29 	.word	0x08006f29
 8006f94:	080070a3 	.word	0x080070a3
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	1d1a      	adds	r2, r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	602a      	str	r2, [r5, #0]
 8006fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0a3      	b.n	80070f4 <_printf_i+0x1f4>
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	6829      	ldr	r1, [r5, #0]
 8006fb0:	0606      	lsls	r6, r0, #24
 8006fb2:	f101 0304 	add.w	r3, r1, #4
 8006fb6:	d50a      	bpl.n	8006fce <_printf_i+0xce>
 8006fb8:	680e      	ldr	r6, [r1, #0]
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	2e00      	cmp	r6, #0
 8006fbe:	da03      	bge.n	8006fc8 <_printf_i+0xc8>
 8006fc0:	232d      	movs	r3, #45	; 0x2d
 8006fc2:	4276      	negs	r6, r6
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc8:	485e      	ldr	r0, [pc, #376]	; (8007144 <_printf_i+0x244>)
 8006fca:	230a      	movs	r3, #10
 8006fcc:	e019      	b.n	8007002 <_printf_i+0x102>
 8006fce:	680e      	ldr	r6, [r1, #0]
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fd6:	bf18      	it	ne
 8006fd8:	b236      	sxthne	r6, r6
 8006fda:	e7ef      	b.n	8006fbc <_printf_i+0xbc>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	6820      	ldr	r0, [r4, #0]
 8006fe0:	1d19      	adds	r1, r3, #4
 8006fe2:	6029      	str	r1, [r5, #0]
 8006fe4:	0601      	lsls	r1, r0, #24
 8006fe6:	d501      	bpl.n	8006fec <_printf_i+0xec>
 8006fe8:	681e      	ldr	r6, [r3, #0]
 8006fea:	e002      	b.n	8006ff2 <_printf_i+0xf2>
 8006fec:	0646      	lsls	r6, r0, #25
 8006fee:	d5fb      	bpl.n	8006fe8 <_printf_i+0xe8>
 8006ff0:	881e      	ldrh	r6, [r3, #0]
 8006ff2:	4854      	ldr	r0, [pc, #336]	; (8007144 <_printf_i+0x244>)
 8006ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2308      	moveq	r3, #8
 8006ffa:	230a      	movne	r3, #10
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007002:	6865      	ldr	r5, [r4, #4]
 8007004:	60a5      	str	r5, [r4, #8]
 8007006:	2d00      	cmp	r5, #0
 8007008:	bfa2      	ittt	ge
 800700a:	6821      	ldrge	r1, [r4, #0]
 800700c:	f021 0104 	bicge.w	r1, r1, #4
 8007010:	6021      	strge	r1, [r4, #0]
 8007012:	b90e      	cbnz	r6, 8007018 <_printf_i+0x118>
 8007014:	2d00      	cmp	r5, #0
 8007016:	d04d      	beq.n	80070b4 <_printf_i+0x1b4>
 8007018:	4615      	mov	r5, r2
 800701a:	fbb6 f1f3 	udiv	r1, r6, r3
 800701e:	fb03 6711 	mls	r7, r3, r1, r6
 8007022:	5dc7      	ldrb	r7, [r0, r7]
 8007024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007028:	4637      	mov	r7, r6
 800702a:	42bb      	cmp	r3, r7
 800702c:	460e      	mov	r6, r1
 800702e:	d9f4      	bls.n	800701a <_printf_i+0x11a>
 8007030:	2b08      	cmp	r3, #8
 8007032:	d10b      	bne.n	800704c <_printf_i+0x14c>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	07de      	lsls	r6, r3, #31
 8007038:	d508      	bpl.n	800704c <_printf_i+0x14c>
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	6861      	ldr	r1, [r4, #4]
 800703e:	4299      	cmp	r1, r3
 8007040:	bfde      	ittt	le
 8007042:	2330      	movle	r3, #48	; 0x30
 8007044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007048:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800704c:	1b52      	subs	r2, r2, r5
 800704e:	6122      	str	r2, [r4, #16]
 8007050:	f8cd a000 	str.w	sl, [sp]
 8007054:	464b      	mov	r3, r9
 8007056:	aa03      	add	r2, sp, #12
 8007058:	4621      	mov	r1, r4
 800705a:	4640      	mov	r0, r8
 800705c:	f7ff fee2 	bl	8006e24 <_printf_common>
 8007060:	3001      	adds	r0, #1
 8007062:	d14c      	bne.n	80070fe <_printf_i+0x1fe>
 8007064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007068:	b004      	add	sp, #16
 800706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706e:	4835      	ldr	r0, [pc, #212]	; (8007144 <_printf_i+0x244>)
 8007070:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007074:	6829      	ldr	r1, [r5, #0]
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	f851 6b04 	ldr.w	r6, [r1], #4
 800707c:	6029      	str	r1, [r5, #0]
 800707e:	061d      	lsls	r5, r3, #24
 8007080:	d514      	bpl.n	80070ac <_printf_i+0x1ac>
 8007082:	07df      	lsls	r7, r3, #31
 8007084:	bf44      	itt	mi
 8007086:	f043 0320 	orrmi.w	r3, r3, #32
 800708a:	6023      	strmi	r3, [r4, #0]
 800708c:	b91e      	cbnz	r6, 8007096 <_printf_i+0x196>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	f023 0320 	bic.w	r3, r3, #32
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	2310      	movs	r3, #16
 8007098:	e7b0      	b.n	8006ffc <_printf_i+0xfc>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	f043 0320 	orr.w	r3, r3, #32
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	2378      	movs	r3, #120	; 0x78
 80070a4:	4828      	ldr	r0, [pc, #160]	; (8007148 <_printf_i+0x248>)
 80070a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070aa:	e7e3      	b.n	8007074 <_printf_i+0x174>
 80070ac:	0659      	lsls	r1, r3, #25
 80070ae:	bf48      	it	mi
 80070b0:	b2b6      	uxthmi	r6, r6
 80070b2:	e7e6      	b.n	8007082 <_printf_i+0x182>
 80070b4:	4615      	mov	r5, r2
 80070b6:	e7bb      	b.n	8007030 <_printf_i+0x130>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	6826      	ldr	r6, [r4, #0]
 80070bc:	6961      	ldr	r1, [r4, #20]
 80070be:	1d18      	adds	r0, r3, #4
 80070c0:	6028      	str	r0, [r5, #0]
 80070c2:	0635      	lsls	r5, r6, #24
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	d501      	bpl.n	80070cc <_printf_i+0x1cc>
 80070c8:	6019      	str	r1, [r3, #0]
 80070ca:	e002      	b.n	80070d2 <_printf_i+0x1d2>
 80070cc:	0670      	lsls	r0, r6, #25
 80070ce:	d5fb      	bpl.n	80070c8 <_printf_i+0x1c8>
 80070d0:	8019      	strh	r1, [r3, #0]
 80070d2:	2300      	movs	r3, #0
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	4615      	mov	r5, r2
 80070d8:	e7ba      	b.n	8007050 <_printf_i+0x150>
 80070da:	682b      	ldr	r3, [r5, #0]
 80070dc:	1d1a      	adds	r2, r3, #4
 80070de:	602a      	str	r2, [r5, #0]
 80070e0:	681d      	ldr	r5, [r3, #0]
 80070e2:	6862      	ldr	r2, [r4, #4]
 80070e4:	2100      	movs	r1, #0
 80070e6:	4628      	mov	r0, r5
 80070e8:	f7f9 f892 	bl	8000210 <memchr>
 80070ec:	b108      	cbz	r0, 80070f2 <_printf_i+0x1f2>
 80070ee:	1b40      	subs	r0, r0, r5
 80070f0:	6060      	str	r0, [r4, #4]
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	2300      	movs	r3, #0
 80070f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fc:	e7a8      	b.n	8007050 <_printf_i+0x150>
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	462a      	mov	r2, r5
 8007102:	4649      	mov	r1, r9
 8007104:	4640      	mov	r0, r8
 8007106:	47d0      	blx	sl
 8007108:	3001      	adds	r0, #1
 800710a:	d0ab      	beq.n	8007064 <_printf_i+0x164>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	079b      	lsls	r3, r3, #30
 8007110:	d413      	bmi.n	800713a <_printf_i+0x23a>
 8007112:	68e0      	ldr	r0, [r4, #12]
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	4298      	cmp	r0, r3
 8007118:	bfb8      	it	lt
 800711a:	4618      	movlt	r0, r3
 800711c:	e7a4      	b.n	8007068 <_printf_i+0x168>
 800711e:	2301      	movs	r3, #1
 8007120:	4632      	mov	r2, r6
 8007122:	4649      	mov	r1, r9
 8007124:	4640      	mov	r0, r8
 8007126:	47d0      	blx	sl
 8007128:	3001      	adds	r0, #1
 800712a:	d09b      	beq.n	8007064 <_printf_i+0x164>
 800712c:	3501      	adds	r5, #1
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	9903      	ldr	r1, [sp, #12]
 8007132:	1a5b      	subs	r3, r3, r1
 8007134:	42ab      	cmp	r3, r5
 8007136:	dcf2      	bgt.n	800711e <_printf_i+0x21e>
 8007138:	e7eb      	b.n	8007112 <_printf_i+0x212>
 800713a:	2500      	movs	r5, #0
 800713c:	f104 0619 	add.w	r6, r4, #25
 8007140:	e7f5      	b.n	800712e <_printf_i+0x22e>
 8007142:	bf00      	nop
 8007144:	0800738d 	.word	0x0800738d
 8007148:	0800739e 	.word	0x0800739e

0800714c <__retarget_lock_acquire_recursive>:
 800714c:	4770      	bx	lr

0800714e <__retarget_lock_release_recursive>:
 800714e:	4770      	bx	lr

08007150 <memcpy>:
 8007150:	440a      	add	r2, r1
 8007152:	4291      	cmp	r1, r2
 8007154:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007158:	d100      	bne.n	800715c <memcpy+0xc>
 800715a:	4770      	bx	lr
 800715c:	b510      	push	{r4, lr}
 800715e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007166:	4291      	cmp	r1, r2
 8007168:	d1f9      	bne.n	800715e <memcpy+0xe>
 800716a:	bd10      	pop	{r4, pc}

0800716c <memmove>:
 800716c:	4288      	cmp	r0, r1
 800716e:	b510      	push	{r4, lr}
 8007170:	eb01 0402 	add.w	r4, r1, r2
 8007174:	d902      	bls.n	800717c <memmove+0x10>
 8007176:	4284      	cmp	r4, r0
 8007178:	4623      	mov	r3, r4
 800717a:	d807      	bhi.n	800718c <memmove+0x20>
 800717c:	1e43      	subs	r3, r0, #1
 800717e:	42a1      	cmp	r1, r4
 8007180:	d008      	beq.n	8007194 <memmove+0x28>
 8007182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800718a:	e7f8      	b.n	800717e <memmove+0x12>
 800718c:	4402      	add	r2, r0
 800718e:	4601      	mov	r1, r0
 8007190:	428a      	cmp	r2, r1
 8007192:	d100      	bne.n	8007196 <memmove+0x2a>
 8007194:	bd10      	pop	{r4, pc}
 8007196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800719a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800719e:	e7f7      	b.n	8007190 <memmove+0x24>

080071a0 <_realloc_r>:
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	4680      	mov	r8, r0
 80071a6:	4614      	mov	r4, r2
 80071a8:	460e      	mov	r6, r1
 80071aa:	b921      	cbnz	r1, 80071b6 <_realloc_r+0x16>
 80071ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	4611      	mov	r1, r2
 80071b2:	f7ff bbdf 	b.w	8006974 <_malloc_r>
 80071b6:	b92a      	cbnz	r2, 80071c4 <_realloc_r+0x24>
 80071b8:	f7ff fb70 	bl	800689c <_free_r>
 80071bc:	4625      	mov	r5, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c4:	f000 f81b 	bl	80071fe <_malloc_usable_size_r>
 80071c8:	4284      	cmp	r4, r0
 80071ca:	4607      	mov	r7, r0
 80071cc:	d802      	bhi.n	80071d4 <_realloc_r+0x34>
 80071ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071d2:	d812      	bhi.n	80071fa <_realloc_r+0x5a>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7ff fbcc 	bl	8006974 <_malloc_r>
 80071dc:	4605      	mov	r5, r0
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0ed      	beq.n	80071be <_realloc_r+0x1e>
 80071e2:	42bc      	cmp	r4, r7
 80071e4:	4622      	mov	r2, r4
 80071e6:	4631      	mov	r1, r6
 80071e8:	bf28      	it	cs
 80071ea:	463a      	movcs	r2, r7
 80071ec:	f7ff ffb0 	bl	8007150 <memcpy>
 80071f0:	4631      	mov	r1, r6
 80071f2:	4640      	mov	r0, r8
 80071f4:	f7ff fb52 	bl	800689c <_free_r>
 80071f8:	e7e1      	b.n	80071be <_realloc_r+0x1e>
 80071fa:	4635      	mov	r5, r6
 80071fc:	e7df      	b.n	80071be <_realloc_r+0x1e>

080071fe <_malloc_usable_size_r>:
 80071fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007202:	1f18      	subs	r0, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	bfbc      	itt	lt
 8007208:	580b      	ldrlt	r3, [r1, r0]
 800720a:	18c0      	addlt	r0, r0, r3
 800720c:	4770      	bx	lr
	...

08007210 <_init>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr

0800721c <_fini>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr
